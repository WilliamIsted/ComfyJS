{"version":3,"file":"comfy.min.mjs","sources":["../src/irc/parse.ts","../src/index.ts","../src/example.ts"],"sourcesContent":["export type ParsedMessage = {\n\traw : string,\n\ttags : { [ name : string ] : string },\n\tsource : string | null,\n\tcommand : string | null,\n\tparameters : string | null,\n};\n\nfunction extractComponent( message : string, index : number ) : { component : string, nextIndex : number } {\n\tconst nextSpace = message.indexOf( \" \", index );\n\tconst rawComponent = message.slice( index + 1, nextSpace );\n\treturn {\n\t\tcomponent: rawComponent,\n\t\tnextIndex: nextSpace + 1,\n\t};\n}\n\n// --- Message parsing based on the IRC v3.2 spec (https://ircv3.net/irc/) ---\n/*\nAccording to IRC v3.2 spec (https://ircv3.net/specs/extensions/message-tags) the messages are formatted as follows:\n\n<message>       ::= ['@' <tags> <SPACE>] [':' <prefix> <SPACE> ] <command> [params] <crlf>\n<tags>          ::= <tag> [';' <tag>]*\n<tag>           ::= <key> ['=' <escaped_value>]\n<key>           ::= [ <client_prefix> ] [ <vendor> '/' ] <key_name>\n<client_prefix> ::= '+'\n<key_name>      ::= <non-empty sequence of ascii letters, digits, hyphens ('-')>\n<escaped_value> ::= <sequence of zero or more utf8 characters except NUL, CR, LF, semicolon (`;`) and SPACE>\n<vendor>        ::= <host>\n*/\nexport function parseMessage( message : string ) : ParsedMessage {\n\tlet parsedMessage : ParsedMessage = {\n\t\traw: message,\n\t\ttags: {},\n\t\tsource: null,\n\t\tcommand: null,\n\t\tparameters: null,\n\t};\n\n\tlet index = 0;\n\n\t// --- Tags Parsing ---\n\t// Check for tags at the beginning of the IRC message indicated by @\n\t// e.g. @emote-only=0;followers-only=-1;r9k=0;room-id=83118047;slow=0;subs-only=0 :tmi.twitch.tv ROOMSTATE #instafluff\n\t// The above has tags and then the normal messages start after a space\n\tif( message.charAt( 0 ) === \"@\" ) {\n\t\t// console.debug( \"This message contains tags\" );\n\t\tconst { component, nextIndex } = extractComponent( message, 0 );\n\t\tfor( const tag of component.split( \";\" ) ) {\n\t\t\tconst parts = tag.split( \"=\" );\n\t\t\tparsedMessage.tags[ parts[ 0 ] ] = parts[ 1 ];\n\t\t}\n\t\tindex = nextIndex; // Should now point to source colon (:).\n\t}\n\n\t// --- Source Parsing ---\n\t// Get the source component (nick and host) of the IRC message.\n\t// The idx should point to the source part; otherwise, it's a PING command.\n\tif( message.charAt( index ) === \":\" ) {\n\t\t// console.debug( \"This message has a source component\" );\n\t\tconst { component, nextIndex } = extractComponent( message, index );\n\t\tparsedMessage.source = component;\n\t\tindex = nextIndex; // Should point to the command part of the message.\n\t}\n\n\t// --- Command Parsing ---\n\t// Get the remainder of the IRC message as a command\n\tif( index < message.length ) {\n\t\t// console.debug( \"This message has a command component\" );\n\t\tconst rawCommand = message.slice( index ).trim();\n\t\tconst commandEnd = rawCommand.indexOf( \":\" );\n\t\tparsedMessage.command = rawCommand.slice( 0, commandEnd < 0 ? undefined : commandEnd ).trim();\n\t\t\n\t\t// Parse the parameters\n\t\tconst parameterIndex = message.indexOf( \":\", index );\n\t\tif( parameterIndex >= 0 ) {\n\t\t\t// console.debug( \"This message has command parameters\" );\n\t\t\tparsedMessage.parameters = message.slice( parameterIndex + 1 );\n\t\t}\n\t}\n\n\treturn parsedMessage;\n}\n\n// TODO: TURN INTO UNIT TESTS\n// const exampleMessages = [\n// \t// \":tmi.twitch.tv CAP * ACK :twitch.tv/tags twitch.tv/commands\",\n\n// \t// \":tmi.twitch.tv 001 justinfan48698855 :Welcome, GLHF!\",\n// \t// \":tmi.twitch.tv 002 justinfan48698855 :Your host is tmi.twitch.tv\",\n// \t// \":tmi.twitch.tv 003 justinfan48698855 :This server is rather new\",\n// \t// \":tmi.twitch.tv 004 justinfan48698855 :-\",\n// \t// \":tmi.twitch.tv 375 justinfan48698855 :-\",\n// \t// \":tmi.twitch.tv 372 justinfan48698855 :You are in a maze of twisty passages, all alike.\",\n// \t// \":tmi.twitch.tv 376 justinfan48698855 :>\",\n\n// \t// \":justinfan48698855!justinfan48698855@justinfan48698855.tmi.twitch.tv JOIN #instafluff\",\n//  \t// \":justinfan48698855.tmi.twitch.tv 353 justinfan48698855 = #instafluff :justinfan48698855\",\n// \t// \":justinfan48698855.tmi.twitch.tv 366 justinfan48698855 #instafluff :End of /NAMES list\",\n// \t// \"@emote-only=0;followers-only=-1;r9k=0;room-id=83118047;slow=0;subs-only=0 :tmi.twitch.tv ROOMSTATE #instafluff\",\n\n// \t\"@badge-info=subscriber/67;badges=broadcaster/1,subscriber/3012,game-developer/1;client-nonce=76552d943fb9395ca816a8efc0a7c6cd;color=#FFD166;display-name=Instafluff;emotes=;first-msg=0;flags=;id=1ce5970f-8e96-4643-a61e-71e46fa44a9e;mod=0;returning-chatter=0;room-id=83118047;subscriber=1;tmi-sent-ts=1677879699984;turbo=0;user-id=83118047;user-type= :instafluff!instafluff@instafluff.tmi.twitch.tv PRIVMSG #instafluff :test message; hello\",\n// \t\"@badge-info=;badges=moderator/1,premium/1;client-nonce=9f37ae4c357ba94d8354bc9bf07dfe0d;color=#0AFF00;display-name=BungalowGlow;emotes=;first-msg=0;flags=;id=5ce83ba6-e7db-4d89-a2a0-f9a731078ad5;mod=1;returning-chatter=0;room-id=83118047;subscriber=0;tmi-sent-ts=1677879698429;turbo=0;user-id=123975421;user-type=mod :bungalowglow!bungalowglow@bungalowglow.tmi.twitch.tv PRIVMSG #instafluff :^^^\",\n// ];\n\n// for( const msg of exampleMessages ) {\n// \tconsole.log( \"Parsing:\", msg );\n// \tconst result = parseMessage( msg );\n// \tconsole.log( result );\n// \tconsole.log( \"\\n\\n\" );\n// }\n","import { parseMessage } from \"./irc/parse\";\n\nconst _WebSocket = global.WebSocket || require( \"ws\" );\n\nconst TwitchServerWSS = \"wss://irc-ws.chat.twitch.tv:443\";\n// const TwitchServerWS = \"ws://irc-ws.chat.twitch.tv:80\";\n\nexport class TwitchChat {\n\t#ws : WebSocket;\n\tdebug : boolean;\n\tchannels : string[];\n\n\tconstructor( username : string, password? : string, channels? : string[] | string, isDebug? : boolean ) {\n\t\tthis.debug = !!isDebug;\n\n\t\t// Ensure that channels is an array\n\t\tif( typeof channels === \"string\" || channels instanceof String ) {\n\t\t\tchannels = [ channels as string ];\n\t\t}\n\t\tthis.channels = channels || [ username ]; // Use username as the channel to join by default\n\n\t\tthis.#ws = new _WebSocket( TwitchServerWSS, [ \"irc\" ] );\n\t\tthis.#ws.onopen = ( event ) => {\n\t\t\t// Request Twitch-specific Capabilities\n\t\t\tthis.#ws.send( \"CAP REQ :twitch.tv/tags twitch.tv/commands\" );\n\n\t\t\t// If a PASS exists then send before NICK\n\t\t\tif( password ) {\n\t\t\t\tthis.#ws.send( `PASS ${password}` );\n\t\t\t\tthis.#ws.send( `NICK ${this.#mainChannel}` );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Join anonymously\n\t\t\t\tconst randomUsername = `justinfan${Math.floor( ( Math.random() * 99998999 ) + 1000 )}`;\n\t\t\t\tconst randomPassword = `INSTAFLUFF`;\n\t\t\t\tthis.#ws.send( `PASS ${randomPassword}` );\n\t\t\t\tthis.#ws.send( `NICK ${randomUsername}` );\n\n\t\t\t\t// TODO: Join rooms after confirmation that we connected properly\n\t\t\t\tthis.#ws.send( `JOIN #${this.#mainChannel}` );\n\t\t\t}\n\t\t};\n\n\t\tthis.#ws.onmessage = ( event ) => {\n\t\t\tconsole.log( \"PROCESSING:\", event.data );\n\t\t\tconst parts = event.data.trim().split( `\\r\\n` );\n\n\t\t\t// console.log( \"message!\", parts );\n\t\t\tfor( const str of parts ) {\n\t\t\t\tconst message = parseMessage( str );\n\t\t\t\tif( message.command ) {\n\t\t\t\t\tconst commandParts = message.command?.split( \" \" );\n\t\t\t\t\tswitch( commandParts[ 0 ] ) {\n\t\t\t\t\tcase \"JOIN\":\n\t\t\t\t\tcase \"PART\":\n\t\t\t\t\tcase \"NOTICE\":\n\t\t\t\t\tcase \"CLEARCHAT\":\n\t\t\t\t\tcase \"HOSTTARGET\":\n\t\t\t\t\tcase \"PRIVMSG\":\n\t\t\t\t\t\t// Chat Message\n\t\t\t\t\t\tconsole.log( \"Channel:\", commandParts[ 1 ], message.parameters );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"PING\":\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"CAP\":\n\t\t\t\t\t\tconsole.log( \"capabilities\", commandParts[ 1 ] );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"GLOBALUSERSTATE\": // Included only if you request the /commands capability.\n\t\t\t\t\t\t// But it has no meaning without also including the /tags capability.\n\t\t\t\t\t\tconsole.log( \"Global User State\" );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"USERSTATE\":   // Included only if you request the /commands capability.\n\t\t\t\t\tcase \"ROOMSTATE\":   // But it has no meaning without also including the /tags capabilities.\n\t\t\t\t\t\tconsole.log( \"Channel:\", commandParts[ 1 ], message.parameters );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"RECONNECT\":  \n\t\t\t\t\t\tconsole.log( \"The Twitch IRC server is about to terminate the connection for maintenance.\" )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"421\":\n\t\t\t\t\t\tconsole.log( `Unsupported IRC command: ${commandParts[ 2 ]}` )\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tcase \"001\":  // Logged in (successfully authenticated). \n\t\t\t\t\t\tconsole.log( \"Channel:\", commandParts[ 1 ], message.parameters );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"002\": // Ignoring all other numeric messages.\n\t\t\t\t\tcase \"003\":\n\t\t\t\t\tcase \"004\":\n\t\t\t\t\tcase \"353\": // Tells you who else is in the chat room you're joining.\n\t\t\t\t\tcase \"366\":\n\t\t\t\t\tcase \"372\":\n\t\t\t\t\tcase \"375\":\n\t\t\t\t\tcase \"376\":\n\t\t\t\t\t\tconsole.log( `numeric message: ${commandParts[ 0 ]}` )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.debug( \"Unsupported command\", commandParts[ 0 ] );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// console.log( message );\n\t\t\t\t// const msg = parser.msg(str);\n\t\t\t\t// if( msg ) {\n\t\t\t\t// \tthis.handleMessage( msg );\n\t\t\t\t// }\n\t\t\t}\n\t\t};\n\n\t\tthis.#ws.onerror = ( event ) => {\n\t\t\tconsole.log( \"ERROR\", event );\n\t\t};\n\n\t\tthis.#ws.onclose = ( event ) => {\n\t\t\tconsole.log( \"CLOSE\", event );\n\t\t};\n\t}\n\n\tget #mainChannel() { return this.channels[ 0 ]; }\n\n\tget version() { return \"@VERSION\"; }\n}\n","import { TwitchChat } from \".\";\n\nconst channel = \"instafluff\";\nconst password = undefined;\n\nconst chat = new TwitchChat( channel, password );\n"],"names":["extractComponent","message","index","nextSpace","parseMessage","parsedMessage","component","nextIndex","tag","parts","rawCommand","commandEnd","parameterIndex","_WebSocket","TwitchServerWSS","_ws","_mainChannel","mainChannel_get","TwitchChat","username","password","channels","isDebug","__privateAdd","__privateSet","__privateGet","event","randomUsername","randomPassword","_a","str","commandParts","channel"],"mappings":"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"}