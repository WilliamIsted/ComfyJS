{"version":3,"file":"comfy.min.mjs","sources":["../src/parse.ts","../src/socket.ts","../src/twitch.ts","../src/index.ts","../src/comfy.ts"],"sourcesContent":["export type ParsedMessage = {\n\traw : string,\n\ttags : { [ name : string ] : string },\n\tsource : string | null,\n\tcommand : string | null,\n\tparameters : string | null,\n};\n\nfunction extractComponent( message : string, index : number ) : { component : string, nextIndex : number } {\n\tconst nextSpace = message.indexOf( \" \", index );\n\tconst rawComponent = message.slice( index + 1, nextSpace );\n\treturn {\n\t\tcomponent: rawComponent,\n\t\tnextIndex: nextSpace + 1,\n\t};\n}\n\n// --- Message parsing based on the IRC v3.2 spec (https://ircv3.net/irc/) ---\n/*\nAccording to IRC v3.2 spec (https://ircv3.net/specs/extensions/message-tags) the messages are formatted as follows:\n\n<message>       ::= ['@' <tags> <SPACE>] [':' <prefix> <SPACE> ] <command> [params] <crlf>\n<tags>          ::= <tag> [';' <tag>]*\n<tag>           ::= <key> ['=' <escaped_value>]\n<key>           ::= [ <client_prefix> ] [ <vendor> '/' ] <key_name>\n<client_prefix> ::= '+'\n<key_name>      ::= <non-empty sequence of ascii letters, digits, hyphens ('-')>\n<escaped_value> ::= <sequence of zero or more utf8 characters except NUL, CR, LF, semicolon (`;`) and SPACE>\n<vendor>        ::= <host>\n*/\nexport function parseMessage( message : string ) : ParsedMessage {\n\tconst parsedMessage : ParsedMessage = {\n\t\traw: message,\n\t\ttags: {},\n\t\tsource: null,\n\t\tcommand: null,\n\t\tparameters: null,\n\t};\n\n\tlet index = 0;\n\n\t// --- Tags Parsing ---\n\t// Check for tags at the beginning of the IRC message indicated by @\n\t// e.g. @emote-only=0;followers-only=-1;r9k=0;room-id=83118047;slow=0;subs-only=0 :tmi.twitch.tv ROOMSTATE #instafluff\n\t// The above has tags and then the normal messages start after a space\n\tif( message[ 0 ] === \"@\" ) {\n\t\t// console.debug( \"This message contains tags\" );\n\t\tconst { component, nextIndex } = extractComponent( message, 0 );\n\t\tfor( const tag of component.split( \";\" ) ) {\n\t\t\tconst parts = tag.split( \"=\" );\n\t\t\tparsedMessage.tags[ parts[ 0 ] ] = parts[ 1 ];\n\t\t}\n\t\tindex = nextIndex; // Should now point to source colon (:).\n\t}\n\n\t// --- Source Parsing ---\n\t// Get the source component (nick and host) of the IRC message.\n\t// The idx should point to the source part; otherwise, it's a PING command.\n\tif( message[ index ] === \":\" ) {\n\t\t// console.debug( \"This message has a source component\" );\n\t\tconst { component, nextIndex } = extractComponent( message, index );\n\t\tparsedMessage.source = component;\n\t\tindex = nextIndex; // Should point to the command part of the message.\n\t}\n\n\t// --- Command Parsing ---\n\t// Get the remainder of the IRC message as a command\n\tif( index < message.length ) {\n\t\t// console.debug( \"This message has a command component\" );\n\t\tconst rawCommand = message.slice( index ).trim();\n\t\tconst commandEnd = rawCommand.indexOf( \":\" );\n\t\tparsedMessage.command = rawCommand.slice( 0, commandEnd < 0 ? undefined : commandEnd ).trim();\n\t\t\n\t\t// Parse the parameters\n\t\tconst parameterIndex = message.indexOf( \":\", index );\n\t\tif( parameterIndex >= 0 ) {\n\t\t\t// console.debug( \"This message has command parameters\" );\n\t\t\tparsedMessage.parameters = message.slice( parameterIndex + 1 );\n\t\t}\n\t}\n\n\treturn parsedMessage;\n}\n","const _WebSocket = globalThis.WebSocket || require( \"ws\" );\n\nexport function createWebSocket( server : string | URL, protocols? : string | undefined ) : WebSocket {\n\treturn new _WebSocket( server, protocols );\n}\n","import { ParsedMessage } from \"./parse\";\n\nexport enum TwitchEventType {\n\tNone = \"none\",\n\tPing = \"Ping\",\n\tPong = \"Pong\",\n\tConnect = \"connect\",\n\tReconnected = \"reconnect\",\n\tError = \"error\",\n\tWarning = \"Warning\",\n\tChatMode = \"chatmode\",\n\tClearChat = \"ClearChat\",\n\tRoomState = \"roomstate\",\n\tGlobalUserState = \"globaluserstate\",\n\tUserState = \"userstate\",\n\tNotice = \"notice\",\n\tJoin = \"join\",\n\tLeave = \"leave\",\n\tCommand = \"command\",\n\tChat = \"message\",\n\tReply = \"reply\",\n\tWhisper = \"whisper\",\n\tAnnouncement = \"announcement\",\n\tCheer = \"Cheer\",\n\tSubscribe = \"sub\",\n\tResubscribe = \"resub\",\n\tSubGift = \"subgift\", // Note: Goal Contributions are not included if it is from a mysterysubgift and is included in the mysterysubgift event instead\n\tAnonymousSubGift = \"anonsubgift\",\n\tMysterySubGift = \"submysterygift\",\n\tAnonymousMysterySubGift = \"anonsubmysterygift\",\n\tSubGiftContinue = \"subgiftcontinue\",\n\tRaid = \"raid\",\n\tTimeout = \"Timeout\",\n\tBan = \"Ban\",\n\tMessageDeleted = \"MessageDeleted\",\n\tAll = \"all\",\n};\n\nconst TwitchUserTypes : { [ key : string ] : string } = {\n\t\"\": \"Normal\",\n\t\"admin\": \"Admin\",\n\t\"global_mod\": \"Global Mod\",\n\t\"staff\": \"Staff\",\n\t\"mod\": \"Moderator\",\n};\n\nexport type ProcessedMessage = {\n    type : TwitchEventType,\n    data? : any,\n\textra? : any,\n};\n\nfunction parseUsername( source : string | null ) {\n\tconst parts = ( source as string ).split( \"!\" );\n\treturn parts.length > 1 ? parts[ 0 ] : undefined;\n}\n\nfunction parseBadges( badgesTag : string ) {\n\tif( !badgesTag ) { return \"\"; }\n\tconst badgeList = badgesTag.split( \",\" );\n\tconst badges : { [ key : string ] : string } = {};\n\tfor( const badge of badgeList ) {\n\t\tconst [ name, version ] = badge.split( \"/\" );\n\t\tbadges[ name ] = version;\n\t}\n\treturn badges;\n}\n\nfunction handleChatMessage( message : ParsedMessage, channel : string ) : ProcessedMessage {\n\tconst isAction = message.parameters?.startsWith( \"\\u0001ACTION\" );\n\tconst sanitizedMessage = isAction ? message.parameters?.match( /^\\u0001ACTION ([^\\u0001]+)\\u0001$/ )![ 1 ] : message.parameters;\n\n\tconst id = message.tags[ \"id\" ];\n\tconst channelId = message.tags[ \"room-id\" ];\n\tconst userId = message.tags[ \"user-id\" ];\n\tconst username = parseUsername( message.source );\n\tconst displayName = message.tags[ \"display-name\" ] || message.tags[ \"login\" ] || username;\n\tconst userType = TwitchUserTypes[ message.tags[ \"user-type\" ] ];\n\tconst badgeInfo = parseBadges( message.tags[ \"badge-info\" ] || \"\" );\n\tconst badges = parseBadges( message.tags[ \"badges\" ] || \"\" );\n\tconst userColor = message.tags[ \"color\" ];\n\tconst emotes = message.tags[ \"emotes\" ];\n\tconst isBroadcaster = username === channel;\n\tconst isMod = message.tags[ \"mod\" ] === \"1\";\n\tconst isFounder = !!badges[ \"founder\" ];\n\tconst isSubscriber = message.tags[ \"subscriber\" ] === \"1\";\n\tconst isTurbo = message.tags[ \"turbo\" ] === \"1\";\n\tconst isVIP = !!badges[ \"vip\" ];\n\tconst isPrime = !!badges[ \"premium\" ];\n\tconst isPartner = !!badges[ \"partner\" ];\n\tconst isGameDeveloper = !!badges[ \"game-developer\" ];\n\tconst timestamp = parseInt( message.tags[ \"tmi-sent-ts\" ] );\n\t\n\tconst isEmoteOnly = message.tags[ \"emote-only\" ] === \"1\";\n\tconst isHighlightedMessage = message.tags[ \"msg-id\" ] === \"highlighted-message\";\n\tconst isSkipSubsModeMessage = message.tags[ \"msg-id\" ] === \"skip-subs-mode-message\";\n\tconst customRewardId = message.tags[ \"custom-reward-id\" ] || null;\n\n\t// TODO: Look into the \"first-msg\" and \"returning-chatter\" tags\n\tconst isFirstMessage = message.tags[ \"first-msg\" ] === \"1\";\n\tconst isReturningChatter = message.tags[ \"returning-chatter\" ] === \"1\";\n\n\tconst flags = {\n\t\tbroadcaster: isBroadcaster,\n\t\tmod: isMod,\n\t\tfounder: isFounder,\n\t\tsubscriber: isSubscriber,\n\t\tvip: isVIP,\n\t\tpartner: isPartner,\n\t\tgameDeveloper: isGameDeveloper,\n\t\tturbo: isTurbo,\n\t\tprime: isPrime,\n\t\thighlighted: isHighlightedMessage,\n\t\tskipSubsMode: isSkipSubsModeMessage,\n\t\tcustomReward: !!customRewardId,\n\t\temoteOnly: isEmoteOnly,\n\t\tfirstMessage: isFirstMessage,\n\t\treturningChatter: isReturningChatter,\n\t}\n\n\tif( message.tags[ \"bits\" ] ) {\n\t\treturn {\n\t\t\ttype: TwitchEventType.Cheer,\n\t\t\tdata: {\n\t\t\t\tchannel,\n\t\t\t\tchannelId,\n\t\t\t\tdisplayName,\n\t\t\t\tusername,\n\t\t\t\tuserId,\n\t\t\t\tuserType,\n\t\t\t\tid,\n\t\t\t\tmessage: message.parameters,\n\t\t\t\tmessageType: isAction ? \"action\" : \"chat\", // TODO: Can bits be an action?\n\t\t\t\tmessageEmotes: emotes,\n\t\t\t\tisEmoteOnly,\n\t\t\t\tuserColor,\n\t\t\t\tuserBadgeInfo: badgeInfo,\n\t\t\t\tuserBadges: badges,\n\t\t\t\tcustomRewardId,\n\t\t\t\tflags,\n\t\t\t\tbits: parseInt( message.tags[ \"bits\" ] ),\n\t\t\t\ttimestamp,\n\t\t\t\textra: message.tags,\n\t\t\t},\n\t\t};\n\t}\n\telse {\n\t\tif( sanitizedMessage?.startsWith( \"!\" ) ) {\n\t\t\tconst msgParts = sanitizedMessage!.split( / (.*)/ );\n\t\t\tconst command = msgParts[ 0 ].substring( 1 ).toLowerCase();\n\t\t\tconst msg = msgParts[ 1 ] || \"\";\n\t\t\treturn {\n\t\t\t\ttype: TwitchEventType.Command,\n\t\t\t\tdata: {\n\t\t\t\t\tchannel,\n\t\t\t\t\tchannelId,\n\t\t\t\t\tdisplayName,\n\t\t\t\t\tusername,\n\t\t\t\t\tuserId,\n\t\t\t\t\tuserType,\n\t\t\t\t\tcommand: command,\n\t\t\t\t\tid,\n\t\t\t\t\tmessage: msg,\n\t\t\t\t\tmessageType: isAction ? \"action\" : \"chat\",\n\t\t\t\t\tmessageEmotes: emotes,\n\t\t\t\t\tisEmoteOnly,\n\t\t\t\t\tuserColor,\n\t\t\t\t\tuserBadgeInfo: badgeInfo,\n\t\t\t\t\tuserBadges: badges,\n\t\t\t\t\tcustomRewardId,\n\t\t\t\t\tflags,\n\t\t\t\t\ttimestamp,\n\t\t\t\t\textra: message.tags,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn {\n\t\t\t\ttype: TwitchEventType.Chat,\n\t\t\t\tdata: {\n\t\t\t\t\tchannel,\n\t\t\t\t\tchannelId,\n\t\t\t\t\tdisplayName,\n\t\t\t\t\tusername,\n\t\t\t\t\tuserId,\n\t\t\t\t\tuserType,\n\t\t\t\t\tid,\n\t\t\t\t\tmessage: sanitizedMessage,\n\t\t\t\t\tmessageType: isAction ? \"action\" : \"chat\",\n\t\t\t\t\tmessageEmotes: emotes,\n\t\t\t\t\tisEmoteOnly,\n\t\t\t\t\tuserColor,\n\t\t\t\t\tuserBadgeInfo: badgeInfo,\n\t\t\t\t\tuserBadges: badges,\n\t\t\t\t\tcustomRewardId,\n\t\t\t\t\tflags,\n\t\t\t\t\ttimestamp,\n\t\t\t\t\textra: message.tags,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport function processMessage( message : ParsedMessage ) : ProcessedMessage | null {\n\ttry {\n\t\tif( message.command ) { // Twitch-Specific Tags: https://dev.twitch.tv/docs/irc/tags/\n\t\t\tconst commandParts = message.command.split( \" \" );\n\t\t\tconst channel = commandParts.length > 1 ? commandParts[ 1 ].substring( 1 ) : undefined;\n\t\t\tswitch( commandParts[ 0 ] ) {\n\t\t\tcase \"PING\":\n\t\t\t\treturn { type: TwitchEventType.Ping\t};\n\t\t\tcase \"PONG\":\n\t\t\t\treturn { type: TwitchEventType.Pong\t};\n\t\t\tcase \"CAP\": // Capabilities Confirmation\n\t\t\t\t// console.debug( \"capabilities\", message.parameters );\n\t\t\t\treturn null;\n\t\t\tcase \"JOIN\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Join,\n\t\t\t\t\tdata: { channel, username: parseUsername( message.source ) },\n\t\t\t\t}\n\t\t\tcase \"PART\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Leave,\n\t\t\t\t\tdata: { channel, username: parseUsername( message.source ) },\n\t\t\t\t}\n\t\t\tcase \"ROOMSTATE\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.RoomState,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t// Only add the properties if they exist\n\t\t\t\t\t\t...( message.tags[ \"broadcaster-lang\" ] && { broadcasterLanguage: message.tags[ \"broadcaster-lang\" ] } ),\n\t\t\t\t\t\t...( message.tags[ \"emote-only\" ] && { emoteOnly: message.tags[ \"emote-only\" ] !== \"0\" } ),\n\t\t\t\t\t\t...( message.tags[ \"followers-only\" ] && { followersOnly: message.tags[ \"followers-only\" ] !== \"-1\" } ),\n\t\t\t\t\t\t...( message.tags[ \"subs-only\" ] && { subscribersOnly: message.tags[ \"subs-only\" ] !== \"0\" } ),\n\t\t\t\t\t\t...( message.tags[ \"r9k\" ] && { r9k: message.tags[ \"r9k\" ] !== \"0\" } ),\n\t\t\t\t\t\t...( message.tags[ \"rituals\" ] && { rituals: message.tags[ \"rituals\" ] !== \"0\" } ),\n\t\t\t\t\t\t...( message.tags[ \"slow\" ] && { slow: message.tags[ \"slow\" ] !== \"0\" } ),\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"GLOBALUSERSTATE\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.GlobalUserState,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ],\n\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\tcolor: message.tags[ \"color\" ],\n\t\t\t\t\t\tbadges: message.tags[ \"badges\" ],\n\t\t\t\t\t\tbadgeInfo: message.tags[ \"badge-info\" ],\n\t\t\t\t\t\temoteSets: message.tags[ \"emote-sets\" ],\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"USERSTATE\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.UserState,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tchannel: channel,\n\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ],\n\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\tcolor: message.tags[ \"color\" ],\n\t\t\t\t\t\tbadgeInfo: parseBadges( message.tags[ \"badge-info\" ] || \"\" ),\n\t\t\t\t\t\tbadges: parseBadges( message.tags[ \"badges\" ] || \"\" ),\n\t\t\t\t\t\temoteSets: message.tags[ \"emote-sets\" ],\n\t\t\t\t\t\t...( message.tags[ \"id\" ] && { id: message.tags[ \"id\" ] } ),\n\t\t\t\t\t\tmod: message.tags[ \"mod\" ] === \"1\",\n\t\t\t\t\t\tsubscriber: message.tags[ \"subscriber\" ] === \"1\",\n\t\t\t\t\t\tturbo: message.tags[ \"turbo\" ] === \"1\",\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"HOSTTARGET\": // No longer supported\n\t\t\t\tbreak;\n\t\t\tcase \"USERNOTICE\":\n\t\t\t\tswitch( message.tags[ \"msg-id\" ] ) {\n\t\t\t\tcase \"announcement\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Announcement,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"sub\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Subscribe,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tmonths: parseInt( message.tags[ \"msg-param-months\" ] ),\n\t\t\t\t\t\t\tmultiMonthDuration: parseInt( message.tags[ \"msg-param-multimonth-duration\" ] ),\n\t\t\t\t\t\t\tmultiMonthTenure: parseInt( message.tags[ \"msg-param-multimonth-tenure\" ] ),\n\t\t\t\t\t\t\tshouldShareStreak: message.tags[ \"msg-param-should-share-streak\" ] === \"1\",\n\t\t\t\t\t\t\tsubPlan: message.tags[ \"msg-param-sub-plan\" ],\n\t\t\t\t\t\t\twasGifted: message.tags[ \"msg-param-was-gifted\" ] === \"true\",\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-contribution-type\" ] && { goalContributionType: message.tags[ \"msg-param-goal-contribution-type\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-current-contributions\" ] && { goalCurrentContributions: parseInt( message.tags[ \"msg-param-goal-current-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-description\" ] && { goalDescription: message.tags[ \"msg-param-goal-description\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-target-contributions\" ] && { goalTargetContributions: parseInt( message.tags[ \"msg-param-goal-target-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-user-contributions\" ] && { goalUserContributions: parseInt( message.tags[ \"msg-param-goal-user-contributions\" ] ) } ),\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"resub\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Resubscribe,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tcumulativeMonths: parseInt( message.tags[ \"msg-param-cumulative-months\" ] ),\n\t\t\t\t\t\t\tmonths: parseInt( message.tags[ \"msg-param-months\" ] ),\n\t\t\t\t\t\t\tmultiMonthDuration: parseInt( message.tags[ \"msg-param-multimonth-duration\" ] ),\n\t\t\t\t\t\t\tmultiMonthTenure: parseInt( message.tags[ \"msg-param-multimonth-tenure\" ] ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-streak-months\" ] && { streakMonths: parseInt( message.tags[ \"msg-param-streak-months\" ] ) } ),\n\t\t\t\t\t\t\tshouldShareStreak: message.tags[ \"msg-param-should-share-streak\" ] === \"1\",\n\t\t\t\t\t\t\tsubPlan: message.tags[ \"msg-param-sub-plan\" ],\n\t\t\t\t\t\t\twasGifted: message.tags[ \"msg-param-was-gifted\" ] === \"true\",\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"submysterygift\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.MysterySubGift,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tgiftCount: parseInt( message.tags[ \"msg-param-mass-gift-count\" ] ),\n\t\t\t\t\t\t\tsenderCount: parseInt( message.tags[ \"msg-param-sender-count\" ] ),\n\t\t\t\t\t\t\tsubPlan: message.tags[ \"msg-param-sub-plan\" ],\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-contribution-type\" ] && { goalContributionType: message.tags[ \"msg-param-goal-contribution-type\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-current-contributions\" ] && { goalCurrentContributions: parseInt( message.tags[ \"msg-param-goal-current-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-description\" ] && { goalDescription: message.tags[ \"msg-param-goal-description\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-target-contributions\" ] && { goalTargetContributions: parseInt( message.tags[ \"msg-param-goal-target-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-user-contributions\" ] && { goalUserContributions: parseInt( message.tags[ \"msg-param-goal-user-contributions\" ] ) } ),\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"subgift\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.SubGift,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\trecipientDisplayName: message.tags[ \"msg-param-recipient-display-name\" ],\n\t\t\t\t\t\t\trecipientId: message.tags[ \"msg-param-recipient-id\" ],\n\t\t\t\t\t\t\trecipientUsername: message.tags[ \"msg-param-recipient-user-name\" ],\n\t\t\t\t\t\t\tmonths: parseInt( message.tags[ \"msg-param-months\" ] ),\n\t\t\t\t\t\t\tgiftMonths: parseInt( message.tags[ \"msg-param-gift-months\" ] ),\n\t\t\t\t\t\t\tsubPlan: message.tags[ \"msg-param-sub-plan\" ],\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-contribution-type\" ] && { goalContributionType: message.tags[ \"msg-param-goal-contribution-type\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-current-contributions\" ] && { goalCurrentContributions: parseInt( message.tags[ \"msg-param-goal-current-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-description\" ] && { goalDescription: message.tags[ \"msg-param-goal-description\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-target-contributions\" ] && { goalTargetContributions: parseInt( message.tags[ \"msg-param-goal-target-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-user-contributions\" ] && { goalUserContributions: parseInt( message.tags[ \"msg-param-goal-user-contributions\" ] ) } ),\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"giftsubcontinue\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.SubGiftContinue,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tgifterDisplayName: message.tags[ \"msg-param-sender-name\" ] || message.tags[ \"msg-param-sender-login\" ],\n\t\t\t\t\t\t\tgifterUsername: message.tags[ \"msg-param-sender-login\" ],\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"raid\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Raid,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tprofileImageURL: message.tags[ \"msg-param-profileImageURL\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"msg-param-displayName\" ] || message.tags[ \"display-name\" ] || message.tags[ \"msg-param-login\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tviewers: parseInt( message.tags[ \"msg-param-viewerCount\" ] ),\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"msg-param-login\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log( \"TODO IMPLEMENT COMMAND\", message );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"WHISPER\":\n\t\t\t\t// TODO: Check for OAuth password and scope for reading whispers\n\t\t\t\tconsole.log( message );\n\t\t\t\tconsole.log( \"Channel:\", channel, message.parameters );\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Whisper,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ] || parseUsername( message.source ),\n\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\tcolor: message.tags[ \"color\" ],\n\t\t\t\t\t\tbadges: message.tags[ \"badges\" ],\n\t\t\t\t\t\temotes: message.tags[ \"emotes\" ],\n\t\t\t\t\t\tturbo: message.tags[ \"turbo\" ] === \"1\",\n\t\t\t\t\t\tthreadId: message.tags[ \"thread-id\" ],\n\t\t\t\t\t\tmessageId: message.tags[ \"message-id\" ],\n\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\tmessageType: \"whisper\",\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"NOTICE\": // Notice Message IDs: https://dev.twitch.tv/docs/irc/msg-id/\n\t\t\t\t// Check for errors\n\t\t\t\tif( message.parameters?.includes( \"Login unsuccessful\" ) || message.parameters?.includes( \"Login authentication failed\" ) ||\n\t\t\t\t\tmessage.parameters?.includes( \"Error logging in\" ) || message.parameters?.includes( \"Improperly formatted auth\" ) ||\n\t\t\t\t\tmessage.parameters?.includes( \"Invalid NICK\" ) || message.parameters?.includes( \"Invalid CAP REQ\" ) ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Error,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// General Notice Event\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Notice,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tmsgId: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"CLEARCHAT\":\n\t\t\t\t// Chat Cleared, User Timeout/Ban\n\t\t\t\tif( message.tags[ \"target-user-id\" ] ) {\n\t\t\t\t\tif( message.tags[ \"ban-duration\" ] ) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: TwitchEventType.Timeout,\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\t\tduration: parseInt( message.tags[ \"ban-duration\" ] ),\n\t\t\t\t\t\t\t\tusername: message.parameters,\n\t\t\t\t\t\t\t\tuserId: message.tags[ \"target-user-id\" ],\n\t\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: TwitchEventType.Ban,\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\t\tusername: message.parameters,\n\t\t\t\t\t\t\t\tuserId: message.tags[ \"target-user-id\" ],\n\t\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.ClearChat,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"CLEARMSG\":\n\t\t\t\t// Message Deleted\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.MessageDeleted,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ], // Room ID seems to be empty for this event\n\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\tid: message.tags[ \"target-msg-id\" ],\n\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"PRIVMSG\":\n\t\t\t\t// Chat Message\n\t\t\t\treturn handleChatMessage( message, channel as string );\n\t\t\tcase \"RECONNECT\":  \n\t\t\t\tconsole.log( \"The Twitch IRC server is about to terminate the connection for maintenance.\" )\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t{\n\t\t\t\t\t// Try and parse a numeric command based on RFC1459 (https://www.rfc-editor.org/rfc/rfc1459.html)\n\t\t\t\t\tconst commandNumber = parseInt( commandParts[ 0 ] );\n\t\t\t\t\tif( commandNumber >= 400 ) {\n\t\t\t\t\t\tconsole.debug( `Error IRC command: ${commandNumber}`, message );\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Command & Reserved responses\n\t\t\t\t\t\tswitch( commandNumber ) {\n\t\t\t\t\t\tcase 1:  // Logged in (successfully authenticated). \n\t\t\t\t\t\t\t// console.debug( \"Username:\", channel );\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tcase 2: // Ignoring all other numeric messages.\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\tcase 353: // Get the names of users in the room\n\t\t\t\t\t\tcase 366: // End of names list\n\t\t\t\t\t\tcase 372: // Message Of The Day\n\t\t\t\t\t\tcase 375: // Message Of The Day Start\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tcase 376: // End of Message Of The Day\n\t\t\t\t\t\t\treturn { type: TwitchEventType.Connect, data: { username: commandParts[ 1 ] } };\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.debug( \"Unsupported numeric command\", commandNumber );\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.debug( \"Unprocessed IRC message:\", message.raw );\n\t\t}\n\t}\n\tcatch( error ) {\n\t\tconsole.error( error );\n\t\treturn {\n\t\t\ttype: TwitchEventType.Warning,\n\t\t\tdata: error,\n\t\t};\n\t}\n\tconsole.log( message );\n\treturn null;\n}\n\nexport function requestCapabilities( ws : WebSocket ) : void {\n\t// Request Twitch-specific Capabilities\n\t// TODO: consider adding twitch.tv/membership CAP to get JOIN and PART events\n\tws.send( \"CAP REQ :twitch.tv/tags twitch.tv/commands\" );\n}\n\nexport function authenticate( ws : WebSocket, username? : string, password? : string ) : void {\n\tconst ircUsername = password ? username : `justinfan${Math.floor( ( Math.random() * 99998999 ) + 1000 )}`;\n\tconst ircPassword = password || `INSTAFLUFF`;\n\tws.send( `PASS ${ircPassword}` );\n\tws.send( `NICK ${ircUsername}` );\n}\n\nexport function joinChannel( ws : WebSocket, channel : string ) : void {\n\tws.send( `JOIN #${channel}` );\n}\n\nexport function leaveChannel( ws : WebSocket, channel : string ) : void {\n\tws.send( `PART #${channel}` );\n}\n\nexport function ping( ws : WebSocket ) : void {\n\tws.send( `PING` );\n}\n\nexport function pong( ws : WebSocket ) : void {\n\tws.send( `PONG` );\n}\n\nexport function sendChat( ws : WebSocket, channel : string, message : string ) : void {\n\t// Note: If we want to send tags like client-nonce, then the chat message should look like\n\t//       @client-nonce=asdf;reply-parent-msg-id PRIVMSG #channel :message text here\n\tws.send( `PRIVMSG #${channel} :${message}` );\n}\n\nexport function replyChat( ws : WebSocket, channel : string, messageId : string, message : string ) : void {\n\t// console.debug( `@reply-parent-msg-id=${messageId} PRIVMSG #${channel} :${message}` );\n\tws.send( `@reply-parent-msg-id=${messageId} PRIVMSG #${channel} :${message}` );\n}\n","import { parseMessage } from \"./parse\";\nimport { createWebSocket } from \"./socket\";\nimport { authenticate, joinChannel, leaveChannel, ping, pong, ProcessedMessage, processMessage, replyChat, requestCapabilities, sendChat, TwitchEventType } from \"./twitch\";\n\nexport type TwitchChatHandler = ( context? : any ) => void;\nexport type TwitchChatMode = {\n\temoteOnly : boolean;\n\tfollowersOnly : boolean;\n\tsubscribersOnly : boolean;\n\tr9k : boolean; // Unique Chat Mode\n\tslow : boolean;\n\tlanguage : string;\n};\n\nexport class TwitchChat {\n\t#ws : WebSocket | undefined;\n\t#username : string;\n\t#password : string | undefined;\n\t#pingTimer : ReturnType<typeof setInterval> | undefined;\n\t#pingTime : number = 0;\n\tdebug : boolean;\n\tchannels : string[];\n\tchatModes : { [ channel : string ] : TwitchChatMode } = {};\n\thandlers : Partial<{ [ key in TwitchEventType ] : TwitchChatHandler | undefined }> = {};\n\n\tconstructor( username : string, password? : string, channels? : string[] | string, isDebug? : boolean ) {\n\t\tthis.#username = username;\n\t\tthis.#password = password;\n\t\tthis.debug = !!isDebug;\n\n\t\t// Ensure that channels is an array\n\t\tif( typeof channels === \"string\" || channels instanceof String ) {\n\t\t\tchannels = [ channels as string ];\n\t\t}\n\t\tthis.channels = channels || [ username ]; // Use username as the channel to join by default\n\n\t\t// Connect to the server\n\t\tthis.#connect();\n\t}\n\n\tget #mainChannel() { return this.channels[ 0 ]; }\n\tget #isConnected() { return this.#ws && this.#ws.readyState === this.#ws.OPEN; }\n\tget version() { return \"2.0.0\"; }\n\n\ton( eventType : TwitchEventType, handler : ( context? : any ) => void ) {\n\t\tthis.handlers[ eventType ] = handler;\n\t}\n\n\tsay( message : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tsendChat( this.#ws, channel || this.#mainChannel, message );\n\t}\n\n\treply( messageId : string, message : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\treplyChat( this.#ws, channel || this.#mainChannel, messageId, message );\n\t}\n\n\tjoin( channel : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tjoinChannel( this.#ws, channel );\n\t}\n\n\tleave( channel : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tleaveChannel( this.#ws, channel );\n\t}\n\n\tdeleteMessage( messageId : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\t// TODO: This requires an API call\n\t\t// https://dev.twitch.tv/docs/api/reference/#delete-chat-messages\n\t}\n\n\t#connect() {\n\t\tif( this.#isConnected ) { return; } // Already connected\n\n\t\tconst TwitchServerWSS = \"wss://irc-ws.chat.twitch.tv:443\";\n\t\t// const TwitchServerWS = \"ws://irc-ws.chat.twitch.tv:80\";\n\n\t\tthis.#ws = createWebSocket( TwitchServerWSS, \"irc\" );\n\t\tthis.#ws.onopen = () => { this.#onOpen(); };\n\t\tthis.#ws.onmessage = ( event ) => { this.#onMessage( event ); };\n\t\tthis.#ws.onerror = ( event ) => { this.#onError( event ); };\n\t\tthis.#ws.onclose = ( event ) => { this.#onClose( event ); };\n\t}\n\n\t#onOpen() {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\trequestCapabilities( this.#ws );\n\t\tauthenticate( this.#ws, this.#username, this.#password );\n\t\t// TODO: Join rooms after confirmation that we connected properly\n\t\tjoinChannel( this.#ws, this.#mainChannel );\n\t}\n\n\t#onError( event : Event ) {\n\t\tconsole.error( \"ERROR\", event );\n\t}\n\n\t#onClose( event : Event ) {\n\t\tconsole.info( \"CLOSE\", event );\n\t\tif( this.#pingTimer ) {\n\t\t\tclearInterval( this.#pingTimer );\n\t\t}\n\t}\n\n\t#ping() {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tthis.#pingTime = Date.now();\n\t\tping( this.#ws );\n\t}\n\n\t#handleSpecialEvents( message : ProcessedMessage ) {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tswitch( message.type ) {\n\t\tcase TwitchEventType.Connect:\n\t\t\tthis.#username = message.data.username;\n\t\t\t// Setup the keep-alive ping timer\n\t\t\tif( this.#pingTimer ) {\n\t\t\t\tclearInterval( this.#pingTimer );\n\t\t\t}\n\t\t\tthis.#pingTimer = setInterval( () => {\n\t\t\t\tthis.#ping();\n\t\t\t}, 60000 );\n\t\t\tbreak;\n\t\tcase TwitchEventType.Ping:\n\t\t\tpong( this.#ws );\n\t\t\tbreak;\n\t\tcase TwitchEventType.Pong:\n\t\t\t// Calculate and attach latency to the data\n\t\t\tmessage.data = message.data || {};\n\t\t\tmessage.data[ \"latency\" ] = ( Date.now() - this.#pingTime ); // Latency in milliseconds\n\t\t\tbreak;\n\t\tcase TwitchEventType.RoomState:\n\t\t\t// Save ChatMode for the room at the first message and then diff the notifications afterwards\n\t\t\t// e.g. emoteOnly & followersOnly are both sent in the initial message but then enabling/disabling emoteOnly doesn't send the followersOnly mode flag\n\t\t\tthis.chatModes[ message.data.channel ] = {\n\t\t\t\t...this.chatModes[ message.data.channel ],\n\t\t\t\t...message.data,\n\t\t\t};\n\t\t\t// TODO: delete chatMode when leaving a channel\n\t\t\tif( this.handlers[ TwitchEventType.ChatMode ] ) {\n\t\t\t\tthis.handlers[ TwitchEventType.ChatMode ]!( this.chatModes[ message.data.channel ] );\n\t\t\t}\n\t\t\tbreak;\n\t\t// case TwitchEventType.Reconnect:\n\t\t// \tthis.#connect();\n\t\t// \tbreak;\n\t\t// case TwitchEventType.Join:\n\t\t// \tif( message.channel ) {\n\t\t// \t\tthis.channels.push( message.channel );\n\t\t// \t}\n\t\t// \tbreak;\n\t\tcase TwitchEventType.Error:\n\t\t\tthis.#ws.close();\n\t\t\tbreak;\n\t\tcase TwitchEventType.Chat:\n\t\t\t// Add the self flag to the messageData\n\t\t\tmessage.data.self = message.data.username === this.#username;\n\t\t\t// Check if there is a reply handler and this is a reply message\n\t\t\tif( this.handlers[ TwitchEventType.Reply ] && message.data.extra[ \"reply-parent-msg-id\" ] ) {\n\t\t\t\tthis.handlers[ TwitchEventType.Reply ]!( {\n\t\t\t\t\t...message.data,\n\t\t\t\t\tparentId: message.data.extra[ \"reply-parent-msg-id\" ],\n\t\t\t\t\tparentUserId: message.data.extra[ \"reply-parent-user-id\" ],\n\t\t\t\t\tparentUser: message.data.extra[ \"reply-parent-user-login\" ],\n\t\t\t\t\tparentMessage: message.data.extra[ \"reply-parent-msg-body\" ],\n\t\t\t\t\tparentDisplayName: message.data.extra[ \"reply-parent-display-name\" ] || message.data.extra[ \"reply-parent-user-login\" ],\n\t\t\t\t} );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t#onMessage( event : MessageEvent<any> ) {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tconst parts = event.data.trim().split( `\\r\\n` );\n\t\tfor( const str of parts ) {\n\t\t\tconst message = processMessage( parseMessage( str ) );\n\t\t\tif( message && message.type !== TwitchEventType.None ) {\n\t\t\t\t// console.log( message );\n\t\t\t\t// Handle special events\n\t\t\t\tthis.#handleSpecialEvents( message );\n\n\t\t\t\t// Send the event to handlers\n\t\t\t\tif( this.handlers[ message.type ] ) {\n\t\t\t\t\tthis.handlers[ message.type ]!( message.data );\n\t\t\t\t}\n\t\t\t\t// Also send to the \"all\" event handler if it exists\n\t\t\t\tif( this.handlers[ TwitchEventType.All ] ) {\n\t\t\t\t\tthis.handlers[ TwitchEventType.All ]!( {\n\t\t\t\t\t\tevent: message.type,\n\t\t\t\t\t\t...message.data,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t// console.debug( message );\n\t\t\t}\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tif( this.#ws && this.#ws.readyState !== this.#ws.CLOSED ) {\n\t\t\tthis.#ws.close();\n\t\t}\n\t}\n}\n","// Comfy.JS v2.0.0\nimport { TwitchChat } from \".\";\nimport { TwitchEventType } from \"./twitch\";\n\nexport type ComfyJSInstance = {\n\tversion: () => string;\n\tonError: ( error : Error ) => void;\n\tonCommand: ( user : string, command : string, message : string, flags : any, extra : any ) => void;\n\tonChat: ( user : string, message : string, flags : any, self : boolean, extra : any ) => void;\n\tonWhisper: ( user : string, message : string, flags : any, self : boolean, extra : any ) => void;\n\tInit: ( username : string, password? : string, channels? : string[] | string, isDebug? : boolean ) => void;\n};\n\nlet comfyInstance : TwitchChat | undefined;\n\nfunction parseMessageEmotes( messageEmotes : string ) : any | null {\n\tif( messageEmotes ) {\n\t\tconst emotes = messageEmotes.split( \"/\" );\n\t\tconst emoteMap : any = {};\n\t\tfor( const emote of emotes ) {\n\t\t\tconst [ id, positions ] = emote.split( \":\" );\n\t\t\temoteMap[ id ] = positions.split( \",\" );\n\t\t}\n\t\treturn emoteMap;\n\t}\n\treturn null;\n}\n\nfunction convertContextToUserState( context : any ) : { [ key : string ] : string } {\n\tconst userState : any = {};\n\tfor( const key in context.extra ) {\n\t\tif( context.extra[ key ] === \"\" ) {\n\t\t\tuserState[ key ] = null;\n\t\t}\n\t\telse if( context.extra[ key ] === \"1\" ) {\n\t\t\tuserState[ key ] = true;\n\t\t}\n\t\telse if( context.extra[ key ] === \"0\" ) {\n\t\t\tuserState[ key ] = false;\n\t\t}\n\t\telse {\n\t\t\tuserState[ key ] = context.extra[ key ];\n\t\t}\n\t}\n\tuserState[ \"badge-info-raw\" ] = userState[ \"badge-info\" ];\n\tuserState[ \"badge-info\" ] = context.userBadgeInfo || null;\n\tuserState[ \"badges-raw\" ] = userState.badges;\n\tuserState.badges = context.userBadges || null;\n\tuserState[ \"emotes-raw\" ] = userState.emotes;\n\tuserState.emotes = parseMessageEmotes( context.messageEmotes );\n\tuserState.username = context.username;\n\tuserState[ \"message-type\" ] = context.messageType;\n\treturn userState;\n}\n\nconst comfyJS : ComfyJSInstance = {\n\tversion: () => { return \"2.0.0\"; },\n\tonError: ( error : Error ) => {\n\t\tconsole.error( \"Error:\", error );\n\t},\n\tonCommand: ( user : string, command : string, message : string, flags : any, extra : any ) => {\n\t\tif( comfyInstance && comfyInstance.debug ) {\n\t\t\tconsole.debug( \"onCommand default handler\" );\n\t\t}\n\t},\n\tonChat: ( user : string, message : string, flags : any, self : boolean, extra : any ) => {\n\t\tif( comfyInstance && comfyInstance.debug ) {\n\t\t\tconsole.debug( \"onChat default handler\" );\n\t\t}\n\t},\n\tonWhisper: ( user : string, message : string, flags : any, self : boolean, extra : any ) => {\n\t\tif( comfyInstance && comfyInstance.debug ) {\n\t\t\tconsole.debug( \"onWhisper default handler\" );\n\t\t}\n\t},\n\tInit: ( username : string, password? : string, channels? : string[] | string, isDebug? : boolean ) => {\n\t\tcomfyInstance = new TwitchChat( username, password, channels, isDebug );\n\t\tcomfyInstance.on( TwitchEventType.Command, ( context? : any ) => {\n\t\t\tcomfyJS.onCommand( context.displayName || context.username, context.command, context.message, context.flags, { ...context, userState: convertContextToUserState( context ), extra: null, flags: null, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\tcomfyInstance.on( TwitchEventType.Chat, ( context? : any ) => {\n\t\t\tcomfyJS.onChat( context.displayName || context.username, context.message, context.flags, context.self, { ...context, userState: convertContextToUserState( context ), extra: null, flags: null, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t},\n};\n\ndeclare global {\n\tinterface Window {\n\t\tComfyJSNew: ComfyJSInstance;\n\t}\n}\n\n// Expose everything, for browser and Node..\nif( typeof module !== \"undefined\" && module.exports ) {\n\tmodule.exports = comfyJS;\n}\n\nif( typeof window !== \"undefined\" ) {\n\twindow.ComfyJSNew = comfyJS;\n}\n"],"names":["extractComponent","message","index","nextSpace","parseMessage","parsedMessage","component","nextIndex","tag","parts","rawCommand","commandEnd","parameterIndex","_WebSocket","createWebSocket","server","protocols","TwitchEventType","TwitchUserTypes","parseUsername","source","parseBadges","badgesTag","badgeList","badges","badge","name","version","handleChatMessage","channel","_a","_b","isAction","sanitizedMessage","id","channelId","userId","username","displayName","userType","badgeInfo","userColor","emotes","isBroadcaster","isMod","isFounder","isSubscriber","isTurbo","isVIP","isPrime","isPartner","isGameDeveloper","timestamp","isEmoteOnly","isHighlightedMessage","isSkipSubsModeMessage","customRewardId","isFirstMessage","isReturningChatter","flags","msgParts","command","msg","processMessage","_c","_d","_e","_f","commandParts","commandNumber","error","requestCapabilities","ws","authenticate","password","ircUsername","ircPassword","joinChannel","leaveChannel","ping","pong","sendChat","replyChat","messageId","_ws","_username","_password","_pingTimer","_pingTime","_mainChannel","mainChannel_get","_isConnected","isConnected_get","_connect","connect_fn","_onOpen","onOpen_fn","_onError","onError_fn","_onClose","onClose_fn","_ping","ping_fn","_handleSpecialEvents","handleSpecialEvents_fn","_onMessage","onMessage_fn","TwitchChat","channels","isDebug","__privateAdd","__privateSet","__privateMethod","eventType","handler","__privateGet","event","str","comfyInstance","parseMessageEmotes","messageEmotes","emoteMap","emote","positions","convertContextToUserState","context","userState","key","comfyJS","user","extra","self"],"mappings":"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"}