{"version":3,"file":"comfy.min.mjs","sources":["../src/parse.ts","../src/socket.ts","../src/twitch.ts","../src/index.ts","../src/secrets.ts","../src/example.ts"],"sourcesContent":["export type ParsedMessage = {\n\traw : string,\n\ttags : { [ name : string ] : string },\n\tsource : string | null,\n\tcommand : string | null,\n\tparameters : string | null,\n};\n\nfunction extractComponent( message : string, index : number ) : { component : string, nextIndex : number } {\n\tconst nextSpace = message.indexOf( \" \", index );\n\tconst rawComponent = message.slice( index + 1, nextSpace );\n\treturn {\n\t\tcomponent: rawComponent,\n\t\tnextIndex: nextSpace + 1,\n\t};\n}\n\n// --- Message parsing based on the IRC v3.2 spec (https://ircv3.net/irc/) ---\n/*\nAccording to IRC v3.2 spec (https://ircv3.net/specs/extensions/message-tags) the messages are formatted as follows:\n\n<message>       ::= ['@' <tags> <SPACE>] [':' <prefix> <SPACE> ] <command> [params] <crlf>\n<tags>          ::= <tag> [';' <tag>]*\n<tag>           ::= <key> ['=' <escaped_value>]\n<key>           ::= [ <client_prefix> ] [ <vendor> '/' ] <key_name>\n<client_prefix> ::= '+'\n<key_name>      ::= <non-empty sequence of ascii letters, digits, hyphens ('-')>\n<escaped_value> ::= <sequence of zero or more utf8 characters except NUL, CR, LF, semicolon (`;`) and SPACE>\n<vendor>        ::= <host>\n*/\nexport function parseMessage( message : string ) : ParsedMessage {\n\tlet parsedMessage : ParsedMessage = {\n\t\traw: message,\n\t\ttags: {},\n\t\tsource: null,\n\t\tcommand: null,\n\t\tparameters: null,\n\t};\n\n\tlet index = 0;\n\n\t// --- Tags Parsing ---\n\t// Check for tags at the beginning of the IRC message indicated by @\n\t// e.g. @emote-only=0;followers-only=-1;r9k=0;room-id=83118047;slow=0;subs-only=0 :tmi.twitch.tv ROOMSTATE #instafluff\n\t// The above has tags and then the normal messages start after a space\n\tif( message.charAt( 0 ) === \"@\" ) {\n\t\t// console.debug( \"This message contains tags\" );\n\t\tconst { component, nextIndex } = extractComponent( message, 0 );\n\t\tfor( const tag of component.split( \";\" ) ) {\n\t\t\tconst parts = tag.split( \"=\" );\n\t\t\tparsedMessage.tags[ parts[ 0 ] ] = parts[ 1 ];\n\t\t}\n\t\tindex = nextIndex; // Should now point to source colon (:).\n\t}\n\n\t// --- Source Parsing ---\n\t// Get the source component (nick and host) of the IRC message.\n\t// The idx should point to the source part; otherwise, it's a PING command.\n\tif( message.charAt( index ) === \":\" ) {\n\t\t// console.debug( \"This message has a source component\" );\n\t\tconst { component, nextIndex } = extractComponent( message, index );\n\t\tparsedMessage.source = component;\n\t\tindex = nextIndex; // Should point to the command part of the message.\n\t}\n\n\t// --- Command Parsing ---\n\t// Get the remainder of the IRC message as a command\n\tif( index < message.length ) {\n\t\t// console.debug( \"This message has a command component\" );\n\t\tconst rawCommand = message.slice( index ).trim();\n\t\tconst commandEnd = rawCommand.indexOf( \":\" );\n\t\tparsedMessage.command = rawCommand.slice( 0, commandEnd < 0 ? undefined : commandEnd ).trim();\n\t\t\n\t\t// Parse the parameters\n\t\tconst parameterIndex = message.indexOf( \":\", index );\n\t\tif( parameterIndex >= 0 ) {\n\t\t\t// console.debug( \"This message has command parameters\" );\n\t\t\tparsedMessage.parameters = message.slice( parameterIndex + 1 );\n\t\t}\n\t}\n\n\treturn parsedMessage;\n}\n\n// TODO: TURN INTO UNIT TESTS\n// const exampleMessages = [\n// \t// \":tmi.twitch.tv CAP * ACK :twitch.tv/tags twitch.tv/commands\",\n\n// \t// \":tmi.twitch.tv 001 justinfan48698855 :Welcome, GLHF!\",\n// \t// \":tmi.twitch.tv 002 justinfan48698855 :Your host is tmi.twitch.tv\",\n// \t// \":tmi.twitch.tv 003 justinfan48698855 :This server is rather new\",\n// \t// \":tmi.twitch.tv 004 justinfan48698855 :-\",\n// \t// \":tmi.twitch.tv 375 justinfan48698855 :-\",\n// \t// \":tmi.twitch.tv 372 justinfan48698855 :You are in a maze of twisty passages, all alike.\",\n// \t// \":tmi.twitch.tv 376 justinfan48698855 :>\",\n\n// \t// \":justinfan48698855!justinfan48698855@justinfan48698855.tmi.twitch.tv JOIN #instafluff\",\n//  \t// \":justinfan48698855.tmi.twitch.tv 353 justinfan48698855 = #instafluff :justinfan48698855\",\n// \t// \":justinfan48698855.tmi.twitch.tv 366 justinfan48698855 #instafluff :End of /NAMES list\",\n// \t// \"@emote-only=0;followers-only=-1;r9k=0;room-id=83118047;slow=0;subs-only=0 :tmi.twitch.tv ROOMSTATE #instafluff\",\n\n// \t\"@badge-info=subscriber/67;badges=broadcaster/1,subscriber/3012,game-developer/1;client-nonce=76552d943fb9395ca816a8efc0a7c6cd;color=#FFD166;display-name=Instafluff;emotes=;first-msg=0;flags=;id=1ce5970f-8e96-4643-a61e-71e46fa44a9e;mod=0;returning-chatter=0;room-id=83118047;subscriber=1;tmi-sent-ts=1677879699984;turbo=0;user-id=83118047;user-type= :instafluff!instafluff@instafluff.tmi.twitch.tv PRIVMSG #instafluff :test message; hello\",\n// \t\"@badge-info=;badges=moderator/1,premium/1;client-nonce=9f37ae4c357ba94d8354bc9bf07dfe0d;color=#0AFF00;display-name=BungalowGlow;emotes=;first-msg=0;flags=;id=5ce83ba6-e7db-4d89-a2a0-f9a731078ad5;mod=1;returning-chatter=0;room-id=83118047;subscriber=0;tmi-sent-ts=1677879698429;turbo=0;user-id=123975421;user-type=mod :bungalowglow!bungalowglow@bungalowglow.tmi.twitch.tv PRIVMSG #instafluff :^^^\",\n// ];\n\n// for( const msg of exampleMessages ) {\n// \tconsole.log( \"Parsing:\", msg );\n// \tconst result = parseMessage( msg );\n// \tconsole.log( result );\n// \tconsole.log( \"\\n\\n\" );\n// }\n","const _WebSocket = global.WebSocket || require( \"ws\" );\n\nexport function createWebSocket( server : string | URL, protocols? : string | undefined ) : WebSocket {\n\treturn new _WebSocket( server, protocols );\n}\n","import { ParsedMessage } from \"./parse\";\n\nexport enum TwitchEventType {\n\tNone = \"none\",\n\tPing = \"Ping\",\n\tPong = \"Pong\",\n\tConnect = \"connect\",\n\tReconnected = \"reconnect\",\n\tError = \"error\",\n\tChatMode = \"roomstate\",\n\tUserstate = \"userstate\",\n\tJoin = \"join\",\n\tPart = \"part\",\n\tCommand = \"command\",\n\tChat = \"message\",\n\tReply = \"reply\",\n\tWhisper = \"whisper\",\n\tRaid = \"raid\",\n\tTimeout = \"Timeout\",\n\tBan = \"Ban\",\n\tMessageDeleted = \"MessageDeleted\",\n\tAll = \"all\",\n};\n\nexport type ProcessedMessage = {\n    type : TwitchEventType,\n    data? : any,\n\textra? : any,\n};\n\nfunction parseUsername( source : string | null ) {\n\tconst parts = ( source as string ).split( \"!\" );\n\treturn parts.length > 1 ? parts[ 0 ] : undefined;\n}\n\nexport function processMessage( message : ParsedMessage ) : ProcessedMessage | null {\n\ttry {\n\t\tif( message.command ) {\n\t\t\tconst commandParts = message.command.split( \" \" );\n\t\t\tswitch( commandParts[ 0 ] ) {\n\t\t\tcase \"PING\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Ping,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"PONG\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Pong,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttimestamp: Date.now(),\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"CAP\": // Capabilities Confirmation\n\t\t\t\t// console.debug( \"capabilities\", message.parameters );\n\t\t\t\treturn null;\n\t\t\tcase \"JOIN\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Join,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\tcase \"PART\":\n\t\t\tcase \"HOSTTARGET\":\n\t\t\tcase \"USERNOTICE\":\n\t\t\t\tconsole.log( \"TODO IMPLEMENT COMMAND\", message );\n\t\t\t\tbreak;\n\t\t\tcase \"WHISPER\":\n\t\t\t\t// TODO: Check for OAuth password and scope for reading whispers\n\t\t\t\tconsole.log( message );\n\t\t\t\tconsole.log( \"Channel:\", commandParts[ 1 ], message.parameters );\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Whisper,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...message.tags,\n\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"NOTICE\":\n\t\t\t\tconsole.log( \"NOTICE!!!\", message );\n\t\t\t\tbreak;\n\t\t\tcase \"CLEARCHAT\":\n\t\t\t\t// Chat Cleared, User Timeout/Ban\n\t\t\t\tif( message.tags[ \"target-user-id\" ] ) {\n\t\t\t\t\tif( message.tags[ \"ban-duration\" ] ) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: TwitchEventType.Timeout,\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t...message.tags,\n\t\t\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\t\t\tusername: message.parameters,\n\t\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: TwitchEventType.Ban,\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t...message.tags,\n\t\t\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\t\t\tusername: message.parameters,\n\t\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// TODO: Handle Chat Cleared\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"CLEARMSG\":\n\t\t\t\t// Message Deleted\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.MessageDeleted,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t...message.tags,\n\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"PRIVMSG\":\n\t\t\t\t// Chat Message\n\t\t\t\tif( message.parameters?.startsWith( \"!\" ) ) {\n\t\t\t\t\tconst msgParts = message.parameters.split( / (.*)/ );\n\t\t\t\t\tconst command = msgParts[ 0 ].substring( 1 ).toLowerCase();\n\t\t\t\t\tconst msg = msgParts[ 1 ] || \"\";\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Command,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t\t\tcommand: command,\n\t\t\t\t\t\t\tmessage: msg,\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmientTs\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t\t\n\t\t\t\t\t// Replace dash to camelCase\n\t\t\t\t\t// const tagKey = parts[ 0 ].replace( /(\\-[a-z])/g, val => val.toUpperCase().replace( \"-\", \"\" ) );\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Chat,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\tcase \"GLOBALUSERSTATE\":\n\t\t\t\tconsole.log( \"Global User State\" );\n\t\t\t\tbreak;\n\t\t\tcase \"USERSTATE\":\n\t\t\t\tswitch( message.tags[ \"msg-id\" ] ) {\n\t\t\t\tcase \"raid\":\n\t\t\t\t\t// TODO: Should User be displayName || username || login?\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Raid,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tprofileImageURL: message.tags[ \"msg-param-profileImageURL\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"msg-param-displayName\" ],\n\t\t\t\t\t\t\tviewers: parseInt( message.tags[ \"msg-param-viewerCount\" ] ),\n\t\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Userstate,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t...message.tags,\n\t\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\tcase \"ROOMSTATE\":\n\t\t\t\t// TODO: Save ChatMode for the room at the first message and then diff the notifications afterwards\n\t\t\t\t//      e.g. emoteOnly & followersOnly are both sent in the initial message but then enabling/disabling emoteOnly doesn't send the followersOnly mode flag\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.ChatMode,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\temoteOnly: message.tags[ \"emote-only\" ] ? message.tags[ \"emote-only\" ] !== \"0\" : false,\n\t\t\t\t\t\tfollowersOnly: message.tags[ \"followers-only\" ] ? message.tags[ \"followers-only\" ] !== \"-1\" : false,\n\t\t\t\t\t\t...message.tags,\n\t\t\t\t\t\tchannel: commandParts[ 1 ],\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"RECONNECT\":  \n\t\t\t\tconsole.log( \"The Twitch IRC server is about to terminate the connection for maintenance.\" )\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t{\n\t\t\t\t\t// Try and parse a numeric command based on RFC1459 (https://www.rfc-editor.org/rfc/rfc1459.html)\n\t\t\t\t\tconst commandNumber = parseInt( commandParts[ 0 ] );\n\t\t\t\t\tif( commandNumber >= 400 ) {\n\t\t\t\t\t\tconsole.debug( `Error IRC command: ${commandNumber}`, message );\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Command & Reserved responses\n\t\t\t\t\t\tswitch( commandNumber ) {\n\t\t\t\t\t\tcase 1:  // Logged in (successfully authenticated). \n\t\t\t\t\t\t\t// console.debug( \"Username:\", commandParts[ 1 ] );\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tcase 2: // Ignoring all other numeric messages.\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\tcase 353: // Get the names of users in the room\n\t\t\t\t\t\tcase 366: // End of names list\n\t\t\t\t\t\tcase 372: // Message Of The Day\n\t\t\t\t\t\tcase 375: // Message Of The Day Start\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tcase 376: // End of Message Of The Day\n\t\t\t\t\t\t\treturn { type: TwitchEventType.Connect };\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.debug( \"Unsupported numeric command\", commandNumber );\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.debug( \"Commandless IRC message:\", message.raw );\n\t\t}\n\t}\n\tcatch( error ) {\n\t\tconsole.error( \"ERROR:\", error );\n\t\treturn {\n\t\t\ttype: TwitchEventType.Error,\n\t\t\tdata: error,\n\t\t};\n\t}\n\tconsole.log( message );\n\treturn null;\n}\n\nexport function requestCapabilities( ws : WebSocket ) : void {\n\t// Request Twitch-specific Capabilities\n\t// TODO: consider adding twitch.tv/membership CAP to get JOIN and PART events\n\tws.send( \"CAP REQ :twitch.tv/tags twitch.tv/commands\" );\n}\n\nexport function authenticate( ws : WebSocket, username? : string, password? : string ) : void {\n\tconst ircUsername = password ? username : `justinfan${Math.floor( ( Math.random() * 99998999 ) + 1000 )}`;\n\tconst ircPassword = password || `INSTAFLUFF`;\n\tws.send( `PASS ${ircPassword}` );\n\tws.send( `NICK ${ircUsername}` );\n}\n\nexport function joinChannel( ws : WebSocket, channel : string ) : void {\n\tws.send( `JOIN #${channel}` );\n}\n\nexport function leaveChannel( ws : WebSocket, channel : string ) : void {\n\tws.send( `PART #${channel}` );\n}\n\nexport function ping( ws : WebSocket ) : void {\n\tws.send( `PING` );\n}\n\nexport function pong( ws : WebSocket ) : void {\n\tws.send( `PONG` );\n}\n\nexport function sendChat( ws : WebSocket, channel : string, message : string ) : void {\n\t// Note: If we want to send tags like client-nonce, then the chat message should look like\n\t//       @client-nonce=asdf;reply-parent-msg-id PRIVMSG #channel :message text here\n\tws.send( `PRIVMSG #${channel} :${message}` );\n}\n\nexport function replyChat( ws : WebSocket, channel : string, messageId : string, message : string ) : void {\n\t// console.debug( `@reply-parent-msg-id=${messageId} PRIVMSG #${channel} :${message}` );\n\tws.send( `@reply-parent-msg-id=${messageId} PRIVMSG #${channel} :${message}` );\n}\n","import { parseMessage } from \"./parse\";\nimport { createWebSocket } from \"./socket\";\nimport { authenticate, joinChannel, ping, pong, processMessage, replyChat, requestCapabilities, sendChat, TwitchEventType } from \"./twitch\";\n\n/*\nDONE:\n- event handlers\n- pong\n- ping (send ping to the server on a timer to keep alive)\n- all ComfyJS Events\n\t! onConnected( isFirstConnect )\n\t\tResponds when connecting to the Twitch chat.\n\t! onError( error )\n\t\tHook for Errors\n\t! onRaid( user, viewers, extra )\n\t\tResponds to raid event\n\tX onJoin( user, self, extra ) - DEPRECATED\n\t\tResponds to user joining the chat\n\tX onPart( user, self, extra ) - DEPRECATED\n\t\tResponds to user leaving the chat\n\tX onHosted( user, viewers, autohost, extra ) - DEPRECATED\n\t\tResponds to channel being hosted\n\t\tRequires being authorized as the broadcaster\n\t! onMessageDeleted( id, extra )\n\t\tResponds to chat message deleted\n\t! onBan( bannedUsername, extra )\n\t\tResponds to a user being banned\n\t! onTimeout( timedOutUsername, durationInSeconds, extra )\n\t\tResponds to a user being timed out\n- APIs / channel points things\n\t- Chat via IRC\n\nTODO:\n- all ComfyJS Events\n\t? onCommand( user, command, message, flags, extra )\n\t\tResponds to \"!\" commands\n\t? onChat( user, message, flags, self, extra )\n\t\tResponds to user chatting\n\t? onWhisper( user, message, flags, self, extra )\n\t\tResponds to user whisper event\n\t? onChatMode()\n\t\tNotifies changes to the chat room mode\n\t- onReward( user, reward, cost, message, extra )\n\t\tREQUIRES EXTRA PERMISSION SCOPES\n\t\tResponds to Channel Point Redemptions\n\t- onCheer( user, message, bits, flags, extra )\n\t\tResponds to user cheering\n\t- onSub( user, message, subTierInfo, extra )\n\t\tResponds to user channel subscription\n\t- onResub( user, message, streamMonths, cumulativeMonths, subTierInfo, extra )\n\t\tResponds to user channel subscription anniversary\n\t- onSubGift( gifterUser, streakMonths, recipientUser, senderCount, subTierInfo, extra )\n\t\tResponds to user gift subscription\n\t- onSubMysteryGift( gifterUser, numbOfSubs, senderCount, subTierInfo, extra )\n\t\tResponds to user sending gift subscriptions\n\t- onGiftSubContinue( user, sender, extra )\n\t\tResponds to user continuing gift subscription\n\t- onReconnect( reconnectCount )\n\t\tResponds when attempting to reconnect to the Twitch chat.\n- parsing tags to events (and parsing usernames and other context better)\n- reconnect\n- connecting to multiple channels\n- connecting to many multiple channels\n- websub events\n- APIs / channel points things\n\t- Chat/Commands sent should also trigger the events from self\n\t- Whisper via API\n\t- Announce via API\n\t- Delete Message via API\n\t- Chat list via API\n- Backwards compat wrapper for previous ComfyJS\n\t- onCommand( user, command, message, flags, extra )\n\t\tResponds to \"!\" commands\n\t- onChat( user, message, flags, self, extra )\n\t\tResponds to user chatting\n\t- onWhisper( user, message, flags, self, extra )\n\t\tResponds to user whisper event\n\t- onMessageDeleted( id, extra )\n\t\tResponds to chat message deleted\n\t- onReward( user, reward, cost, message, extra )\n\t\tREQUIRES EXTRA PERMISSION SCOPES\n\t\tResponds to Channel Point Redemptions\n\t- onJoin( user, self, extra )\n\t\tResponds to user joining the chat\n\t- onPart( user, self, extra )\n\t\tResponds to user leaving the chat\n\t- onHosted( user, viewers, autohost, extra )\n\t\tResponds to channel being hosted\n\t\tRequires being authorized as the broadcaster\n\t- onBan( bannedUsername, extra )\n\t\tResponds to a user being banned\n\t- onTimeout( timedOutUsername, durationInSeconds, extra )\n\t\tResponds to a user being timed out\n\t- onRaid( user, viewers, extra )\n\t\tResponds to raid event\n\t- onCheer( user, message, bits, flags, extra )\n\t\tResponds to user cheering\n\t- onSub( user, message, subTierInfo, extra )\n\t\tResponds to user channel subscription\n\t- onResub( user, message, streamMonths, cumulativeMonths, subTierInfo, extra )\n\t\tResponds to user channel subscription anniversary\n\t- onSubGift( gifterUser, streakMonths, recipientUser, senderCount, subTierInfo, extra )\n\t\tResponds to user gift subscription\n\t- onSubMysteryGift( gifterUser, numbOfSubs, senderCount, subTierInfo, extra )\n\t\tResponds to user sending gift subscriptions\n\t- onGiftSubContinue( user, sender, extra )\n\t\tResponds to user continuing gift subscription\n\t- onConnected( address, port, isFirstConnect )\n\t\tResponds when connecting to the Twitch chat.\n\t- onReconnect( reconnectCount )\n\t\tResponds when attempting to reconnect to the Twitch chat.\n\t- onError( error )\n\t\tHook for Errors\n*/\n\nexport type TwitchChatHandler = ( context? : any ) => void;\n\nexport class TwitchChat {\n\t#ws : WebSocket | undefined;\n\t#username : string;\n\t#password : string | undefined;\n\t#pingTimer : ReturnType<typeof setInterval> | undefined;\n\t#pingTime : number = 0;\n\tdebug : boolean;\n\tchannels : string[];\n\thandlers : Partial<{ [ key in TwitchEventType ] : TwitchChatHandler | undefined }> = {\n\t\t[ TwitchEventType.None ]: undefined,\n\t\t[ TwitchEventType.Ping ]: undefined,\n\t\t[ TwitchEventType.Connect ]: undefined,\n\t\t[ TwitchEventType.Reconnected ]: undefined,\n\t\t[ TwitchEventType.Error ]: undefined,\n\t\t[ TwitchEventType.ChatMode ]: undefined,\n\t\t[ TwitchEventType.Userstate ]: undefined,\n\t\t[ TwitchEventType.Join ]: undefined,\n\t\t[ TwitchEventType.Part ]: undefined,\n\t\t[ TwitchEventType.Command ]: undefined,\n\t\t[ TwitchEventType.Chat ]: undefined,\n\t\t[ TwitchEventType.Whisper ]: undefined,\n\t\t[ TwitchEventType.Raid ]: undefined,\n\t\t[ TwitchEventType.All ]: undefined,\n\t};\n\n\tconstructor( username : string, password? : string, channels? : string[] | string, isDebug? : boolean ) {\n\t\tthis.#username = username;\n\t\tthis.#password = password;\n\t\tthis.debug = !!isDebug;\n\n\t\t// Ensure that channels is an array\n\t\tif( typeof channels === \"string\" || channels instanceof String ) {\n\t\t\tchannels = [ channels as string ];\n\t\t}\n\t\tthis.channels = channels || [ username ]; // Use username as the channel to join by default\n\n\t\t// Connect to the server\n\t\tthis.#connect();\n\t}\n\n\tget #mainChannel() { return this.channels[ 0 ]; }\n\tget #isConnected() { return this.#ws && this.#ws.readyState === this.#ws.OPEN; }\n\tget version() { return \"2.0.0\"; }\n\n\ton( eventType : TwitchEventType, handler : ( context? : any ) => void ) {\n\t\tthis.handlers[ eventType ] = handler;\n\t}\n\n\tsay( message : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tsendChat( this.#ws, channel || this.#mainChannel, message );\n\t}\n\n\treply( messageId : string, message : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\treplyChat( this.#ws, channel || this.#mainChannel, messageId, message );\n\t}\n\n\tdeleteMessage( messageId : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\t// TODO: This requires an API call\n\t\t// https://dev.twitch.tv/docs/api/reference/#delete-chat-messages\n\t}\n\n\t#connect() {\n\t\tif( this.#isConnected ) { return; } // Already connected\n\n\t\tconst TwitchServerWSS = \"wss://irc-ws.chat.twitch.tv:443\";\n\t\t// const TwitchServerWS = \"ws://irc-ws.chat.twitch.tv:80\";\n\n\t\tthis.#ws = createWebSocket( TwitchServerWSS, \"irc\" );\n\t\tthis.#ws.onopen = () => { this.#onOpen(); };\n\t\tthis.#ws.onmessage = ( event ) => { this.#onMessage( event ); };\n\t\tthis.#ws.onerror = ( event ) => { this.#onError( event ); };\n\t\tthis.#ws.onclose = ( event ) => { this.#onClose( event ); };\n\t}\n\n\t#onOpen() {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\trequestCapabilities( this.#ws );\n\t\tauthenticate( this.#ws, this.#username, this.#password );\n\t\t// TODO: Join rooms after confirmation that we connected properly\n\t\tjoinChannel( this.#ws, this.#mainChannel );\n\t}\n\n\t#onError( event : Event ) {\n\t\tconsole.log( \"ERROR\", event );\n\t}\n\n\t#onClose( event : Event ) {\n\t\tconsole.log( \"CLOSE\", event );\n\t\tif( this.#pingTimer ) {\n\t\t\tclearInterval( this.#pingTimer );\n\t\t}\n\t}\n\n\t#ping() {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\t\tthis.#pingTime = Date.now();\n\t\tping( this.#ws );\n\t}\n\n\t#onMessage( event : MessageEvent<any> ) {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tconst parts = event.data.trim().split( `\\r\\n` );\n\t\tfor( const str of parts ) {\n\t\t\tconst message = processMessage( parseMessage( str ) );\n\t\t\tif( message && message.type !== TwitchEventType.None ) {\n\t\t\t\t// Handle special events\n\t\t\t\tif( message.type === TwitchEventType.Connect ) {\n\t\t\t\t\t// Setup the keep-alive ping timer\n\t\t\t\t\tif( this.#pingTimer ) {\n\t\t\t\t\t\tclearInterval( this.#pingTimer );\n\t\t\t\t\t}\n\t\t\t\t\tthis.#pingTimer = setInterval( () => {\n\t\t\t\t\t\tthis.#ping();\n\t\t\t\t\t}, 60000 );\n\t\t\t\t}\n\t\t\t\tif( message.type === TwitchEventType.Ping ) {\n\t\t\t\t\tpong( this.#ws );\n\t\t\t\t}\n\t\t\t\tif( message.type === TwitchEventType.Pong ) {\n\t\t\t\t\t// Calculate and attach latency to the data\n\t\t\t\t\tmessage.data[ \"latency\" ] = ( message.data.timestamp - this.#pingTime ); // Latency in milliseconds\n\t\t\t\t}\n\t\t\t\t// Send the event to handlers\n\t\t\t\tif( this.handlers[ message.type ] ) {\n\t\t\t\t\tthis.handlers[ message.type ]!( message.data );\n\t\t\t\t}\n\t\t\t\tif( message.type === TwitchEventType.Chat ) {\n\t\t\t\t\t// Check if this is a reply message\n\t\t\t\t\tif( this.handlers[ TwitchEventType.Reply ] && message.data.extra[ \"reply-parent-msg-id\" ] ) {\n\t\t\t\t\t\tthis.handlers[ TwitchEventType.Reply ]!( {\n\t\t\t\t\t\t\t...message.data,\n\t\t\t\t\t\t\tparentId: message.data.extra[ \"reply-parent-msg-id\" ],\n\t\t\t\t\t\t\tparentUserId: message.data.extra[ \"reply-parent-user-id\" ],\n\t\t\t\t\t\t\tparentUser: message.data.extra[ \"reply-parent-user-login\" ],\n\t\t\t\t\t\t\tparentMessage: message.data.extra[ \"reply-parent-msg-body\" ],\n\t\t\t\t\t\t\tparentDisplayName: message.data.extra[ \"reply-parent-display-name\" ],\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Also send to the \"all\" event handler if it exists\n\t\t\t\tif( this.handlers[ TwitchEventType.All ] ) {\n\t\t\t\t\tthis.handlers[ TwitchEventType.All ]!( message.data );\n\t\t\t\t}\n\t\t\t\t// console.debug( message );\n\t\t\t}\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tif( this.#ws && this.#ws.readyState !== this.#ws.CLOSED ) {\n\t\t\tthis.#ws.close();\n\t\t}\n\t}\n}\n","export const secretPassword = \"oauth:bmifibqgh2tcmvx7i5a41bgbks3pt5\";\n","import { TwitchChat } from \".\";\nimport { secretPassword } from \"./secrets\";\nimport { TwitchEventType } from \"./twitch\";\n\nconst channel = \"instafluff\";\nconst password = secretPassword; //undefined;\n\nconst comfyJs = new TwitchChat( channel, password );\ncomfyJs.on( TwitchEventType.Connect, () => {\n\tconsole.log( \"Connected to Twitch Chat!\" );\n} );\ncomfyJs.on( TwitchEventType.Error, ( context? : any ) => {\n\tconsole.error( \"ERROR:\", context );\n} );\ncomfyJs.on( TwitchEventType.ChatMode, ( context? : any ) => {\n\tconsole.error( \"ChatMode:\", context );\n} );\ncomfyJs.on( TwitchEventType.Command, ( context? : any ) => {\n\tconsole.log( `${context.channel} - ${context.username} used command !${context.command} ${context.message}`, context );\n\tif( context.command === \"reply\" ) {\n\t\tconsole.log( context );\n\t\tcomfyJs.reply( context.extra.id, \"Hello!\" );\n\t}\n\tif( context.command === \"delete\" ) {\n\t\tconsole.log( context );\n\t\tcomfyJs.deleteMessage( context.extra.id ); // TODO: This currently does not work\n\t}\n} );\ncomfyJs.on( TwitchEventType.Chat, ( context? : any ) => {\n\tconsole.log( `${context.channel} - ${context.username} : ${context.message}`, context );\n} );\ncomfyJs.on( TwitchEventType.Chat, ( context? : any ) => {\n\tconsole.log( `${context.channel} - ${context.username} : ${context.message}`, context );\n} );\ncomfyJs.on( TwitchEventType.Whisper, ( context? : any ) => {\n\tconsole.log( `${context.channel} - ${context.username} : ${context.message}` );\n} );\ncomfyJs.on( TwitchEventType.Raid, ( context? : any ) => {\n\tconsole.log( `${context.channel} - ${context.username} has raided!`, context );\n} );\ncomfyJs.on( TwitchEventType.Reply, ( context? : any ) => {\n\tconsole.log( `${context.channel} - ${context.username} replied to ${context.parentDisplayName} : ${context.message}`, context );\n\t// TODO: REMOVE THIS. THIS IS A TEST\n\tsetTimeout( () => {\n\t\tcomfyJs.reply( context.extra.id, \"Yes, I am replying to your message\" );\n\t}, 3000 );\n} );\ncomfyJs.on( TwitchEventType.Pong, ( context? : any ) => {\n\tconsole.log( `PONG: ${context.latency} ms` );\n} );\ncomfyJs.on( TwitchEventType.MessageDeleted, ( context? : any ) => {\n\tconsole.log( `Message Deleted in ${context.channel}`, context );\n} );\ncomfyJs.on( TwitchEventType.Ban, ( context? : any ) => {\n\tconsole.log( `User Banned in ${context.channel}`, context );\n} );\ncomfyJs.on( TwitchEventType.Timeout, ( context? : any ) => {\n\tconsole.log( `User Timed Out in ${context.channel}`, context );\n} );\n\n// setTimeout( () => {\n// \ttry {\n// \t\tconsole.log( \"Sending Chat Message\" );\n// \t\tcomfyJs.say( \"testing!\" );\n// \t\tconsole.log( \"Sent!\" );\n// \t}\n// \tcatch( err ) {\n// \t\tconsole.error( err );\n// \t}\n// }, 3000 );\n"],"names":["extractComponent","message","index","nextSpace","parseMessage","parsedMessage","component","nextIndex","tag","parts","rawCommand","commandEnd","parameterIndex","_WebSocket","createWebSocket","server","protocols","TwitchEventType","parseUsername","source","processMessage","_a","commandParts","msgParts","command","msg","commandNumber","error","requestCapabilities","ws","authenticate","username","password","ircUsername","ircPassword","joinChannel","channel","ping","pong","sendChat","replyChat","messageId","_ws","_username","_password","_pingTimer","_pingTime","_mainChannel","mainChannel_get","_isConnected","isConnected_get","_connect","connect_fn","_onOpen","onOpen_fn","_onError","onError_fn","_onClose","onClose_fn","_ping","ping_fn","_onMessage","onMessage_fn","TwitchChat","channels","isDebug","__privateAdd","__privateSet","__privateMethod","eventType","handler","__privateGet","event","str","secretPassword","comfyJs","context"],"mappings":";;;;;;;;;;AAQA,SAASA,EAAkBC,GAAkBC,GAA8D;AAC1G,QAAMC,IAAYF,EAAQ,QAAS,KAAKC,CAAM;AAEvC,SAAA;AAAA,IACN,WAFoBD,EAAQ,MAAOC,IAAQ,GAAGC,CAAU;AAAA,IAGxD,WAAWA,IAAY;AAAA,EAAA;AAEzB;AAeO,SAASC,EAAcH,GAAmC;AAChE,MAAII,IAAgC;AAAA,IACnC,KAAKJ;AAAA,IACL,MAAM,CAAC;AAAA,IACP,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,YAAY;AAAA,EAAA,GAGTC,IAAQ;AAMZ,MAAID,EAAQ,OAAQ,CAAE,MAAM,KAAM;AAEjC,UAAM,EAAE,WAAAK,GAAW,WAAAC,EAAA,IAAcP,EAAkBC,GAAS,CAAE;AAC9D,eAAWO,KAAOF,EAAU,MAAO,GAAI,GAAI;AACpC,YAAAG,IAAQD,EAAI,MAAO,GAAI;AAC7B,MAAAH,EAAc,KAAMI,EAAO,CAAE,CAAE,IAAIA,EAAO,CAAE;AAAA,IAC7C;AACQ,IAAAP,IAAAK;AAAA,EACT;AAKA,MAAIN,EAAQ,OAAQC,CAAM,MAAM,KAAM;AAErC,UAAM,EAAE,WAAAI,GAAW,WAAAC,EAAA,IAAcP,EAAkBC,GAASC,CAAM;AAClE,IAAAG,EAAc,SAASC,GACfJ,IAAAK;AAAA,EACT;AAII,MAAAL,IAAQD,EAAQ,QAAS;AAE5B,UAAMS,IAAaT,EAAQ,MAAOC,CAAM,EAAE,KAAK,GACzCS,IAAaD,EAAW,QAAS,GAAI;AAC7B,IAAAL,EAAA,UAAUK,EAAW,MAAO,GAAGC,IAAa,IAAI,SAAYA,CAAW,EAAE,KAAK;AAG5F,UAAMC,IAAiBX,EAAQ,QAAS,KAAKC,CAAM;AACnD,IAAIU,KAAkB,MAErBP,EAAc,aAAaJ,EAAQ,MAAOW,IAAiB,CAAE;AAAA,EAE/D;AAEO,SAAAP;AACR;AClFA,MAAMQ,IAAa,OAAO,aAAa,QAAS,IAAK;AAErC,SAAAC,EAAiBC,GAAuBC,GAA8C;AAC9F,SAAA,IAAIH,EAAYE,GAAQC,CAAU;AAC1C;ACFY,IAAAC,sBAAAA,OACXA,EAAA,OAAO,QACPA,EAAA,OAAO,QACPA,EAAA,OAAO,QACPA,EAAA,UAAU,WACVA,EAAA,cAAc,aACdA,EAAA,QAAQ,SACRA,EAAA,WAAW,aACXA,EAAA,YAAY,aACZA,EAAA,OAAO,QACPA,EAAA,OAAO,QACPA,EAAA,UAAU,WACVA,EAAA,OAAO,WACPA,EAAA,QAAQ,SACRA,EAAA,UAAU,WACVA,EAAA,OAAO,QACPA,EAAA,UAAU,WACVA,EAAA,MAAM,OACNA,EAAA,iBAAiB,kBACjBA,EAAA,MAAM,OAnBKA,IAAAA,KAAA,CAAA,CAAA;AA4BZ,SAASC,EAAeC,GAAyB;AAC1C,QAAAV,IAAUU,EAAmB,MAAO,GAAI;AAC9C,SAAOV,EAAM,SAAS,IAAIA,EAAO,CAAE,IAAI;AACxC;AAEO,SAASW,EAAgBnB,GAAoD;AF3BpF,MAAAoB;AE4BK,MAAA;AACH,QAAIpB,EAAQ,SAAU;AACrB,YAAMqB,IAAerB,EAAQ,QAAQ,MAAO,GAAI;AACxC,cAAAqB,EAAc,CAAE,GAAI;AAAA,QAC5B,KAAK;AACG,iBAAA;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,cACL,WAAW,KAAK,IAAI;AAAA,YACrB;AAAA,UAAA;AAAA,QAEF,KAAK;AACG,iBAAA;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,cACL,WAAW,KAAK,IAAI;AAAA,YACrB;AAAA,UAAA;AAAA,QAEF,KAAK;AAEG,iBAAA;AAAA,QACR,KAAK;AACG,iBAAA;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,cACL,SAASA,EAAc,CAAE;AAAA,cACzB,UAAUJ,EAAejB,EAAQ,MAAO;AAAA,YACzC;AAAA,UAAA;AAAA,QAEF,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACI,kBAAA,IAAK,0BAA0BA,CAAQ;AAC/C;AAAA,QACD,KAAK;AAEJ,yBAAQ,IAAKA,CAAQ,GACrB,QAAQ,IAAK,YAAYqB,EAAc,CAAE,GAAGrB,EAAQ,UAAW,GACxD;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,cACL,GAAGA,EAAQ;AAAA,cACX,SAASqB,EAAc,CAAE;AAAA,cACzB,UAAUJ,EAAejB,EAAQ,MAAO;AAAA,cACxC,SAASA,EAAQ;AAAA,YAClB;AAAA,UAAA;AAAA,QAEF,KAAK;AACI,kBAAA,IAAK,aAAaA,CAAQ;AAClC;AAAA,QACD,KAAK;AAEA,cAAAA,EAAQ,KAAM,gBAAiB;AAC9B,mBAAAA,EAAQ,KAAM,cAAe,IACzB;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,gBACL,GAAGA,EAAQ;AAAA,gBACX,SAASqB,EAAc,CAAE;AAAA,gBACzB,UAAUrB,EAAQ;AAAA,gBAClB,OAAOA,EAAQ;AAAA,cAChB;AAAA,YAAA,IAIM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,gBACL,GAAGA,EAAQ;AAAA,gBACX,SAASqB,EAAc,CAAE;AAAA,gBACzB,UAAUrB,EAAQ;AAAA,gBAClB,OAAOA,EAAQ;AAAA,cAChB;AAAA,YAAA;AAOH;AAAA,QACD,KAAK;AAEG,iBAAA;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,cACL,GAAGA,EAAQ;AAAA,cACX,SAASqB,EAAc,CAAE;AAAA,cACzB,UAAUJ,EAAejB,EAAQ,MAAO;AAAA,cACxC,SAASA,EAAQ;AAAA,cACjB,OAAOA,EAAQ;AAAA,YAChB;AAAA,UAAA;AAAA,QAEF,KAAK;AAEJ,eAAIoB,IAAApB,EAAQ,eAAR,QAAAoB,EAAoB,WAAY,MAAQ;AAC3C,kBAAME,IAAWtB,EAAQ,WAAW,MAAO,OAAQ,GAC7CuB,IAAUD,EAAU,CAAE,EAAE,UAAW,CAAE,EAAE,eACvCE,IAAMF,EAAU,CAAE,KAAK;AACtB,mBAAA;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,gBACL,SAASD,EAAc,CAAE;AAAA,gBACzB,UAAUJ,EAAejB,EAAQ,MAAO;AAAA,gBACxC,SAAAuB;AAAA,gBACA,SAASC;AAAA,gBACT,WAAW,SAAUxB,EAAQ,KAAM,QAAa;AAAA,gBAChD,OAAOA,EAAQ;AAAA,cAChB;AAAA,YAAA;AAAA,UACD;AAKO,mBAAA;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,gBACL,SAASqB,EAAc,CAAE;AAAA,gBACzB,UAAUJ,EAAejB,EAAQ,MAAO;AAAA,gBACxC,SAASA,EAAQ;AAAA,gBACjB,WAAW,SAAUA,EAAQ,KAAM,aAAc,CAAE;AAAA,gBACnD,OAAOA,EAAQ;AAAA,cAChB;AAAA,YAAA;AAAA,QAGH,KAAK;AACJ,kBAAQ,IAAK,mBAAoB;AACjC;AAAA,QACD,KAAK;AACI,kBAAAA,EAAQ,KAAM,QAAS,GAAI;AAAA,YACnC,KAAK;AAEG,qBAAA;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,kBACL,iBAAiBA,EAAQ,KAAM,2BAA4B;AAAA,kBAC3D,aAAaA,EAAQ,KAAM,uBAAwB;AAAA,kBACnD,SAAS,SAAUA,EAAQ,KAAM,uBAAwB,CAAE;AAAA,kBAC3D,SAASqB,EAAc,CAAE;AAAA,kBACzB,UAAUJ,EAAejB,EAAQ,MAAO;AAAA,kBACxC,WAAW,SAAUA,EAAQ,KAAM,aAAc,CAAE;AAAA,kBACnD,OAAOA,EAAQ;AAAA,gBAChB;AAAA,cAAA;AAAA,YAEF;AACQ,qBAAA;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,kBACL,GAAGA,EAAQ;AAAA,kBACX,SAASqB,EAAc,CAAE;AAAA,kBACzB,UAAUJ,EAAejB,EAAQ,MAAO;AAAA,kBACxC,OAAOA,EAAQ;AAAA,gBAChB;AAAA,cAAA;AAAA,UAEF;AAAA,QACD,KAAK;AAGG,iBAAA;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,cACL,WAAWA,EAAQ,KAAM,YAAa,IAAIA,EAAQ,KAAM,YAAa,MAAM,MAAM;AAAA,cACjF,eAAeA,EAAQ,KAAM,gBAAiB,IAAIA,EAAQ,KAAM,gBAAiB,MAAM,OAAO;AAAA,cAC9F,GAAGA,EAAQ;AAAA,cACX,SAASqB,EAAc,CAAE;AAAA,YAC1B;AAAA,UAAA;AAAA,QAEF,KAAK;AACJ,kBAAQ,IAAK,6EAA8E;AAC3F;AAAA,QACD;AACC;AAEC,kBAAMI,IAAgB,SAAUJ,EAAc,CAAE,CAAE;AAClD,gBAAII,KAAiB;AACZ,6BAAA,MAAO,sBAAsBA,KAAiBzB,CAAQ,GACvD;AAIP,oBAAQyB,GAAgB;AAAA,cACxB,KAAK;AAEG,uBAAA;AAAA,cACR,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AAAA,cACL,KAAK;AACG,uBAAA;AAAA,cACR,KAAK;AACG,uBAAA;AAAA,kBAAE,MAAM;AAAA;AAAA;cAChB;AACS,+BAAA,MAAO,+BAA+BA,CAAc,GACrD;AAAA,YACR;AAAA,UAEF;AACA;AAAA,MACD;AAAA,IAAA;AAGQ,cAAA,MAAO,4BAA4BzB,EAAQ,GAAI;AAAA,WAGlD0B;AACE,mBAAA,MAAO,UAAUA,CAAM,GACxB;AAAA,MACN,MAAM;AAAA,MACN,MAAMA;AAAA,IAAA;AAAA,EAER;AACA,iBAAQ,IAAK1B,CAAQ,GACd;AACR;AAEO,SAAS2B,EAAqBC,GAAwB;AAG5D,EAAAA,EAAG,KAAM,4CAA6C;AACvD;AAEgB,SAAAC,EAAcD,GAAgBE,GAAoBC,GAA4B;AACvF,QAAAC,IAAcD,IAAWD,IAAW,YAAY,KAAK,MAAS,KAAK,OAAW,IAAA,WAAa,GAAK,KAChGG,IAAcF,KAAY;AAC7B,EAAAH,EAAA,KAAM,QAAQK,GAAc,GAC5BL,EAAA,KAAM,QAAQI,GAAc;AAChC;AAEgB,SAAAE,EAAaN,GAAgBO,GAA0B;AACnE,EAAAP,EAAA,KAAM,SAASO,GAAU;AAC7B;AAMO,SAASC,EAAMR,GAAwB;AAC7C,EAAAA,EAAG,KAAM,MAAO;AACjB;AAEO,SAASS,EAAMT,GAAwB;AAC7C,EAAAA,EAAG,KAAM,MAAO;AACjB;AAEgB,SAAAU,EAAUV,GAAgBO,GAAkBnC,GAA0B;AAGlF,EAAA4B,EAAA,KAAM,YAAYO,MAAYnC,GAAU;AAC5C;AAEO,SAASuC,EAAWX,GAAgBO,GAAkBK,GAAoBxC,GAA0B;AAE1G,EAAA4B,EAAG,KAAM,wBAAwBY,cAAsBL,MAAYnC,GAAU;AAC9E;AF3RA,IAAAyC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC;AG6GO,MAAMC,EAAW;AAAA,EAyBvB,YAAahC,GAAmBC,GAAoBgC,GAA+BC,GAAqB;AAexG,IAAAC,EAAA,MAAInB;AACJ,IAAAmB,EAAA,MAAIjB;AA6BJ,IAAAiB,EAAA,MAAAf;AAaA,IAAAe,EAAA,MAAAb;AAUA,IAAAa,EAAA,MAAAX;AAIA,IAAAW,EAAA,MAAAT;AAOA,IAAAS,EAAA,MAAAP;AAOA,IAAAO,EAAA,MAAAL;AA9GA,IAAAK,EAAA,MAAAxB,GAAA;AACA,IAAAwB,EAAA,MAAAvB,GAAA;AACA,IAAAuB,EAAA,MAAAtB,GAAA;AACA,IAAAsB,EAAA,MAAArB,GAAA;AACA,IAAAqB,EAAA,MAAApB,GAAA;AAAqB,IAAAqB,EAAA,MAAArB,GAAA,IAGgE,KAAA,WAAA;AAAA,MACpF,CAAE7B,EAAgB,IAAK,GAAG;AAAA,MAC1B,CAAEA,EAAgB,IAAK,GAAG;AAAA,MAC1B,CAAEA,EAAgB,OAAQ,GAAG;AAAA,MAC7B,CAAEA,EAAgB,WAAY,GAAG;AAAA,MACjC,CAAEA,EAAgB,KAAM,GAAG;AAAA,MAC3B,CAAEA,EAAgB,QAAS,GAAG;AAAA,MAC9B,CAAEA,EAAgB,SAAU,GAAG;AAAA,MAC/B,CAAEA,EAAgB,IAAK,GAAG;AAAA,MAC1B,CAAEA,EAAgB,IAAK,GAAG;AAAA,MAC1B,CAAEA,EAAgB,OAAQ,GAAG;AAAA,MAC7B,CAAEA,EAAgB,IAAK,GAAG;AAAA,MAC1B,CAAEA,EAAgB,OAAQ,GAAG;AAAA,MAC7B,CAAEA,EAAgB,IAAK,GAAG;AAAA,MAC1B,CAAEA,EAAgB,GAAI,GAAG;AAAA,IAAA,GAIzBkD,EAAA,MAAKxB,GAAYZ,IACjBoC,EAAA,MAAKvB,GAAYZ,IACZ,KAAA,QAAQ,CAAC,CAACiC,IAGX,OAAOD,KAAa,YAAYA,aAAoB,YACvDA,IAAW,CAAEA,CAAmB,IAE5B,KAAA,WAAWA,KAAY,CAAEjC,CAAS,GAGvCqC,EAAA,MAAKjB,GAAAC,GAAL;AAAA,EACD;AAAA,EAIA,IAAI,UAAU;AAAS,WAAA;AAAA,EAAY;AAAA,EAEnC,GAAIiB,GAA6BC,GAAuC;AAClE,SAAA,SAAUD,CAAU,IAAIC;AAAA,EAC9B;AAAA,EAEA,IAAKrE,GAAkBmC,GAA2B;AAC7C,IAACmC,EAAA,MAAK7B,MACL6B,EAAA,MAAKtB,GAAAC,MAEVX,EAAUgC,EAAA,MAAK7B,IAAKN,KAAWmC,EAAA,MAAKxB,GAAAC,IAAc/C,CAAQ;AAAA,EAC3D;AAAA,EAEA,MAAOwC,GAAoBxC,GAAkBmC,GAA2B;AACnE,IAACmC,EAAA,MAAK7B,MACL6B,EAAA,MAAKtB,GAAAC,MAEVV,EAAW+B,EAAA,MAAK7B,IAAKN,KAAWmC,EAAA,MAAKxB,GAAAC,IAAcP,GAAWxC,CAAQ;AAAA,EACvE;AAAA,EAEA,cAAewC,GAAoBL,GAA2B;AACzD,IAACmC,EAAA,MAAK7B,MACL6B,EAAA,MAAKtB,GAAAC;AAAA,EAIX;AAAA,EA8FA,UAAU;AACT,IAAIqB,EAAA,MAAK7B,MAAO6B,EAAA,MAAK7B,GAAI,eAAe6B,EAAA,MAAK7B,GAAI,UAChD6B,EAAA,MAAK7B,GAAI;EAEX;AACD;AAtKCA,IAAA,eACAC,IAAA,eACAC,IAAA,eACAC,IAAA,eACAC,IAAA,eAmCIC,IAAA,eAAAC,IAAe,WAAA;AAAS,SAAA,KAAK,SAAU,CAAE;AAAG,GAC5CC,IAAA,eAAAC,IAAe,WAAA;AAAE,SAAOqB,EAAA,MAAK7B,MAAO6B,EAAA,MAAK7B,GAAI,eAAe6B,EAAA,MAAK7B,GAAI;AAAM,GA6B/ES,IAAA,eAAAC,IAAW,WAAA;AACV,MAAImB,EAAA,MAAKtB,GAAAC;AAAiB;AAKrB,EAAAiB,EAAA,MAAAzB,GAAM5B,EAHa,mCAGqB,KAAM,IAC9CyD,EAAA,MAAA7B,GAAI,SAAS,MAAM;AAAE,IAAA0B,EAAA,MAAKf,GAAAC,GAAL;AAAA,EAAa,GAClCiB,EAAA,MAAA7B,GAAI,YAAY,CAAE8B,MAAW;AAAE,IAAAJ,EAAA,MAAKP,GAAAC,GAAL,WAAiBU;AAAA,EAAM,GACtDD,EAAA,MAAA7B,GAAI,UAAU,CAAE8B,MAAW;AAAE,IAAAJ,EAAA,MAAKb,GAAAC,GAAL,WAAegB;AAAA,EAAM,GAClDD,EAAA,MAAA7B,GAAI,UAAU,CAAE8B,MAAW;AAAE,IAAAJ,EAAA,MAAKX,GAAAC,GAAL,WAAec;AAAA,EAAM;AACxD,GAEAnB,IAAA,eAAAC,IAAU,WAAA;AACL,EAACiB,EAAA,MAAK7B,MACL6B,EAAA,MAAKtB,GAAAC,OAEVtB,EAAqB2C,EAAA,MAAK7B,EAAI,GAC9BZ,EAAcyC,EAAA,MAAK7B,IAAK6B,EAAA,MAAK5B,IAAW4B,EAAA,MAAK3B,EAAU,GAE1CT,EAAAoC,EAAA,MAAK7B,IAAK6B,EAAA,MAAKxB,GAAAC,EAAa;AAC1C,GAEAO,IAAA,eAAAC,aAAUgB,GAAgB;AACjB,UAAA,IAAK,SAASA,CAAM;AAC7B,GAEAf,IAAA,eAAAC,aAAUc,GAAgB;AACjB,UAAA,IAAK,SAASA,CAAM,GACxBD,EAAA,MAAK1B,MACR,cAAe0B,EAAA,MAAK1B,EAAW;AAEjC,GAEAc,IAAA,eAAAC,IAAQ,WAAA;AACH,EAACW,EAAA,MAAK7B,MACL6B,EAAA,MAAKtB,GAAAC,OACLiB,EAAA,MAAArB,GAAY,KAAK,QACtBT,EAAMkC,EAAA,MAAK7B,EAAI;AAChB,GAEAmB,IAAA,eAAAC,aAAYU,GAA4B;AAEnC,MADA,CAACD,EAAA,MAAK7B,MACN,CAAC6B,EAAA,MAAKtB,GAAAC;AAAiB;AAE3B,QAAMzC,IAAQ+D,EAAM,KAAK,OAAO,MAAO;AAAA,CAAO;AAC9C,aAAWC,KAAOhE,GAAQ;AACzB,UAAMR,IAAUmB,EAAgBhB,EAAcqE,CAAI,CAAE;AACpD,IAAIxE,KAAWA,EAAQ,SAASgB,EAAgB,SAE3ChB,EAAQ,SAASgB,EAAgB,YAEhCsD,EAAA,MAAK1B,MACR,cAAe0B,EAAA,MAAK1B,EAAW,GAE3BsB,EAAA,MAAAtB,GAAa,YAAa,MAAM;AACpC,MAAAuB,EAAA,MAAKT,GAAAC,GAAL;AAAA,OACE,GAAM,KAEN3D,EAAQ,SAASgB,EAAgB,QACpCqB,EAAMiC,EAAA,MAAK7B,EAAI,GAEZzC,EAAQ,SAASgB,EAAgB,SAEpChB,EAAQ,KAAM,UAAgBA,EAAQ,KAAK,YAAYsE,EAAA,MAAKzB,KAGzD,KAAK,SAAU7C,EAAQ,IAAK,KAC/B,KAAK,SAAUA,EAAQ,IAAK,EAAIA,EAAQ,IAAK,GAE1CA,EAAQ,SAASgB,EAAgB,QAEhC,KAAK,SAAUA,EAAgB,KAAM,KAAKhB,EAAQ,KAAK,MAAO,qBAAsB,KAClF,KAAA,SAAUgB,EAAgB,KAAM,EAAI;AAAA,MACxC,GAAGhB,EAAQ;AAAA,MACX,UAAUA,EAAQ,KAAK,MAAO,qBAAsB;AAAA,MACpD,cAAcA,EAAQ,KAAK,MAAO,sBAAuB;AAAA,MACzD,YAAYA,EAAQ,KAAK,MAAO,yBAA0B;AAAA,MAC1D,eAAeA,EAAQ,KAAK,MAAO,uBAAwB;AAAA,MAC3D,mBAAmBA,EAAQ,KAAK,MAAO,2BAA4B;AAAA,IAAA,CAClE,GAIA,KAAK,SAAUgB,EAAgB,GAAI,KACtC,KAAK,SAAUA,EAAgB,GAAI,EAAIhB,EAAQ,IAAK;AAAA,EAIvD;AACD;ACrRM,MAAMyE,IAAiB,wCCIxBtC,IAAU,cACVJ,IAAW0C,GAEXC,IAAU,IAAIZ,EAAY3B,GAASJ,CAAS;AAClD2C,EAAQ,GAAI1D,EAAgB,SAAS,MAAM;AAC1C,UAAQ,IAAK,2BAA4B;AAC1C,CAAE;AACF0D,EAAQ,GAAI1D,EAAgB,OAAO,CAAE2D,MAAoB;AAChD,UAAA,MAAO,UAAUA,CAAQ;AAClC,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,UAAU,CAAE2D,MAAoB;AACnD,UAAA,MAAO,aAAaA,CAAQ;AACrC,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,SAAS,CAAE2D,MAAoB;AAClD,UAAA,IAAK,GAAGA,EAAQ,aAAaA,EAAQ,0BAA0BA,EAAQ,WAAWA,EAAQ,WAAWA,CAAQ,GACjHA,EAAQ,YAAY,YACvB,QAAQ,IAAKA,CAAQ,GACrBD,EAAQ,MAAOC,EAAQ,MAAM,IAAI,QAAS,IAEvCA,EAAQ,YAAY,aACvB,QAAQ,IAAKA,CAAQ,GACbD,EAAA,cAAeC,EAAQ,MAAM,EAAG;AAE1C,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,MAAM,CAAE2D,MAAoB;AAC/C,UAAA,IAAK,GAAGA,EAAQ,aAAaA,EAAQ,cAAcA,EAAQ,WAAWA,CAAQ;AACvF,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,MAAM,CAAE2D,MAAoB;AAC/C,UAAA,IAAK,GAAGA,EAAQ,aAAaA,EAAQ,cAAcA,EAAQ,WAAWA,CAAQ;AACvF,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,SAAS,CAAE2D,MAAoB;AAC1D,UAAQ,IAAK,GAAGA,EAAQ,aAAaA,EAAQ,cAAcA,EAAQ,SAAU;AAC9E,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,MAAM,CAAE2D,MAAoB;AACvD,UAAQ,IAAK,GAAGA,EAAQ,aAAaA,EAAQ,wBAAwBA,CAAQ;AAC9E,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,OAAO,CAAE2D,MAAoB;AAChD,UAAA,IAAK,GAAGA,EAAQ,aAAaA,EAAQ,uBAAuBA,EAAQ,uBAAuBA,EAAQ,WAAWA,CAAQ,GAE9H,WAAY,MAAM;AACjB,IAAAD,EAAQ,MAAOC,EAAQ,MAAM,IAAI,oCAAqC;AAAA,KACpE,GAAK;AACT,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,MAAM,CAAE2D,MAAoB;AAC/C,UAAA,IAAK,SAASA,EAAQ,YAAa;AAC5C,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,gBAAgB,CAAE2D,MAAoB;AACjE,UAAQ,IAAK,sBAAsBA,EAAQ,WAAWA,CAAQ;AAC/D,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,KAAK,CAAE2D,MAAoB;AACtD,UAAQ,IAAK,kBAAkBA,EAAQ,WAAWA,CAAQ;AAC3D,CAAE;AACFD,EAAQ,GAAI1D,EAAgB,SAAS,CAAE2D,MAAoB;AAC1D,UAAQ,IAAK,qBAAqBA,EAAQ,WAAWA,CAAQ;AAC9D,CAAE;"}