{"version":3,"file":"comfy.min.mjs","sources":["../src/util.ts","../src/parse.ts","../src/socket.ts","../src/twitch.ts","../src/index.ts","../src/comfy.ts"],"sourcesContent":["// Escape values for IRC messages (https://ircv3.net/specs/extensions/message-tags.html#escaping-values)\nexport function unescapeIRC( text : string ) : string {\n\tif( !text || typeof text !== \"string\" || !text.includes( \"\\\\\" ) ) {\n\t\treturn text;\n\t}\n\treturn text.replace( /\\\\(.)/g, ( _, char ) => {\n\t\tswitch( char ) {\n\t\tcase \"\\\\\": return \"\\\\\";\n\t\tcase \":\": return \";\";\n\t\tcase \"s\": return \" \";\n\t\tcase \"r\": return \"\\r\";\n\t\tcase \"n\": return \"\\n\";\n\t\tdefault: return char;\n\t\t}\n\t} );\n}\n","import { unescapeIRC } from \"./util\";\n\nexport type ParsedMessage = {\n\traw : string,\n\ttags : { [ name : string ] : string },\n\tsource : string | null,\n\tcommand : string | null,\n\tparameters : string | null,\n};\n\nfunction extractComponent( message : string, index : number ) : { component : string, nextIndex : number } {\n\tconst nextSpace = message.indexOf( \" \", index );\n\tconst rawComponent = message.slice( index + 1, nextSpace );\n\treturn {\n\t\tcomponent: rawComponent,\n\t\tnextIndex: nextSpace + 1,\n\t};\n}\n\n// --- Message parsing based on the IRC v3.2 spec (https://ircv3.net/irc/) ---\n/*\nAccording to IRC v3.2 spec (https://ircv3.net/specs/extensions/message-tags) the messages are formatted as follows:\n\n<message>       ::= ['@' <tags> <SPACE>] [':' <prefix> <SPACE> ] <command> [params] <crlf>\n<tags>          ::= <tag> [';' <tag>]*\n<tag>           ::= <key> ['=' <escaped_value>]\n<key>           ::= [ <client_prefix> ] [ <vendor> '/' ] <key_name>\n<client_prefix> ::= '+'\n<key_name>      ::= <non-empty sequence of ascii letters, digits, hyphens ('-')>\n<escaped_value> ::= <sequence of zero or more utf8 characters except NUL, CR, LF, semicolon (`;`) and SPACE>\n<vendor>        ::= <host>\n*/\nexport function parseMessage( message : string ) : ParsedMessage {\n\tconst parsedMessage : ParsedMessage = {\n\t\traw: message,\n\t\ttags: {},\n\t\tsource: null,\n\t\tcommand: null,\n\t\tparameters: null,\n\t};\n\n\tlet index = 0;\n\n\t// --- Tags Parsing ---\n\t// Check for tags at the beginning of the IRC message indicated by @\n\t// e.g. @emote-only=0;followers-only=-1;r9k=0;room-id=83118047;slow=0;subs-only=0 :tmi.twitch.tv ROOMSTATE #instafluff\n\t// The above has tags and then the normal messages start after a space\n\tif( message[ 0 ] === \"@\" ) {\n\t\t// console.debug( \"This message contains tags\" );\n\t\tconst { component, nextIndex } = extractComponent( message, 0 );\n\t\tfor( const tag of component.split( \";\" ) ) {\n\t\t\tconst tagSplitIndex = tag.indexOf( \"=\" );\n\t\t\tconst key = tag.substring( 0, tagSplitIndex );\n\t\t\tconst value = tag.substring( tagSplitIndex + 1 );\n\t\t\t// Optimizations for common tags that won't be escaped\n\t\t\tswitch( key ) {\n\t\t\tcase \"emote-sets\":\n\t\t\tcase \"ban-duration\":\n\t\t\tcase \"bits\":\n\t\t\tcase \"id\":\n\t\t\tcase \"room-id\":\n\t\t\tcase \"color\":\n\t\t\tcase \"login\":\n\t\t\t\tparsedMessage.tags[ key ] = value;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tparsedMessage.tags[ key ] = unescapeIRC( value );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tindex = nextIndex; // Should now point to source colon (:).\n\t}\n\n\t// --- Source Parsing ---\n\t// Get the source component (nick and host) of the IRC message.\n\t// The idx should point to the source part; otherwise, it's a PING command.\n\tif( message[ index ] === \":\" ) {\n\t\t// console.debug( \"This message has a source component\" );\n\t\tconst { component, nextIndex } = extractComponent( message, index );\n\t\tparsedMessage.source = component;\n\t\tindex = nextIndex; // Should point to the command part of the message.\n\t}\n\n\t// --- Command Parsing ---\n\t// Get the remainder of the IRC message as a command\n\tif( index < message.length ) {\n\t\t// console.debug( \"This message has a command component\" );\n\t\tconst rawCommand = message.slice( index ).trim();\n\t\tconst commandEnd = rawCommand.indexOf( \":\" );\n\t\tparsedMessage.command = rawCommand.slice( 0, commandEnd < 0 ? undefined : commandEnd ).trim();\n\t\t\n\t\t// Parse the parameters\n\t\tconst parameterIndex = message.indexOf( \":\", index );\n\t\tif( parameterIndex >= 0 ) {\n\t\t\t// console.debug( \"This message has command parameters\" );\n\t\t\tparsedMessage.parameters = message.slice( parameterIndex + 1 );\n\t\t}\n\t}\n\n\treturn parsedMessage;\n}\n","const _WebSocket = globalThis.WebSocket || require( \"ws\" );\n\nexport function createWebSocket( server : string | URL, protocols? : string | undefined ) : WebSocket {\n\treturn new _WebSocket( server, protocols );\n}\n","import { ParsedMessage } from \"./parseFast\";\n\nexport enum TwitchEventType {\n\tNone = \"none\",\n\tPing = \"Ping\",\n\tPong = \"Pong\",\n\tConnect = \"connect\",\n\tReconnect = \"reconnect\",\n\tError = \"error\",\n\tWarning = \"Warning\",\n\tChatMode = \"chatmode\",\n\tClearChat = \"ClearChat\",\n\tRoomState = \"roomstate\",\n\tGlobalUserState = \"globaluserstate\",\n\tUserState = \"userstate\",\n\tNotice = \"notice\",\n\tJoin = \"join\",\n\tLeave = \"leave\",\n\tCommand = \"command\",\n\tChat = \"message\",\n\tReply = \"reply\",\n\tWhisper = \"whisper\",\n\tAnnouncement = \"announcement\",\n\tCheer = \"Cheer\",\n\tSubscribe = \"sub\",\n\tResubscribe = \"resub\",\n\tSubGift = \"subgift\",\n\tMysterySubGift = \"submysterygift\",\n\tSubGiftContinue = \"subgiftcontinue\",\n\tRaid = \"raid\",\n\tUnraid = \"unraid\",\n\tTimeout = \"Timeout\",\n\tBan = \"Ban\",\n\tMessageDeleted = \"MessageDeleted\",\n\t// Experimental\n\tViewerMilestone = \"ViewerMilestone\",\n\tAll = \"all\",\n};\n\nexport enum TwitchMessageFlag {\n\tAggressiveContent = \"aggressive\",\n\tIdentityBasedHate = \"identity-hate\",\n\tProfaneContent = \"profane\",\n\tSexualContent = \"sexual\",\n};\n\nconst TwitchUserTypes : { [ key : string ] : string } = {\n\t\"\": \"Normal\",\n\t\"admin\": \"Admin\",\n\t\"global_mod\": \"Global Mod\",\n\t\"staff\": \"Staff\",\n\t\"mod\": \"Moderator\",\n};\n\nexport type ProcessedMessage = {\n\t\ttype : TwitchEventType,\n\t\tdata? : any,\n\textra? : any,\n};\n\n// function parseUsername( source : string | null ) {\n// \tconst parts = ( source as string ).split( \"!\" );\n// \treturn parts.length > 1 ? parts[ 0 ] : undefined;\n// }\n\n// function parseBadges( badgesTag : string ) : { [ key : string ] : string } | undefined {\n// \tif( !badgesTag ) { return undefined; }\n// \tconst badgeList = badgesTag.split( \",\" );\n// \tconst badges : { [ key : string ] : string } = {};\n// \tfor( const badge of badgeList ) {\n// \t\tconst [ name, version ] = badge.split( \"/\" );\n// \t\tbadges[ name ] = version;\n// \t}\n// \treturn badges;\n// }\n\n// function parseMessageFlags( flagsTag : string ) {\n// \tif( !flagsTag ) { return undefined; }\n// \tconst flagsList = flagsTag.split( \",\" );\n// \tconst flags : Partial<{ [ key in TwitchMessageFlag ] : number | undefined }> = {};\n// \tfor( const flag of flagsList ) {\n// \t\tconst [ , label ] = flag.split( \":\" );\n// \t\tconst [ category, level ] = label.split( \".\" );\n// \t\tswitch( category ) {\n// \t\tcase \"A\":\n// \t\t\tflags[ TwitchMessageFlag.AggressiveContent ] = Math.max( flags[ TwitchMessageFlag.AggressiveContent ] || 0, parseInt( level ) );\n// \t\t\tbreak;\n// \t\tcase \"I\":\n// \t\t\tflags[ TwitchMessageFlag.IdentityBasedHate ] = Math.max( flags[ TwitchMessageFlag.IdentityBasedHate ] || 0, parseInt( level ) );\n// \t\t\tbreak;\n// \t\tcase \"P\":\n// \t\t\tflags[ TwitchMessageFlag.ProfaneContent ] = Math.max( flags[ TwitchMessageFlag.ProfaneContent ] || 0, parseInt( level ) );\n// \t\t\tbreak;\n// \t\tcase \"S\":\n// \t\t\tflags[ TwitchMessageFlag.SexualContent ] = Math.max( flags[ TwitchMessageFlag.SexualContent ] || 0, parseInt( level ) );\n// \t\t\tbreak;\n// \t\tdefault:\n// \t\t\tbreak;\n// \t\t}\n// \t}\n// \treturn flags;\n// }\n\nfunction parseUsername( source: string | null ): string | undefined {\n\tif( !source ) { return undefined };\n\tconst userIndex = source.indexOf( \"!\" );\n\treturn userIndex !== -1 ? source.slice( 0, userIndex ) : undefined;\n}\n\nfunction parseBadges( badgesTag: string ): { [key: string]: string } | undefined {\n\tif( !badgesTag ) { return undefined };\n\tconst badgeList = badgesTag.split( \",\" );\n\tconst badges: { [ key: string ]: string } = {};\n\t\n\tfor( const badge of badgeList ) {\n\t\tconst splitIndex = badge.indexOf( \"/\" );\n\t\tbadges[ badge.slice( 0, splitIndex ) ] = badge.slice( splitIndex + 1 );\n\t}\n\t\n\treturn badges;\n}\n\nfunction parseMessageFlags( flagsTag: string ) {\n\tif( !flagsTag ) { return undefined };\n\tconst flagsList = flagsTag.split( \",\" );\n\tconst flags: Partial<{ [key in TwitchMessageFlag]: number | undefined }> = {};\n\t\n\tfor( const flag of flagsList ) {\n\t\tconst colonIndex = flag.indexOf( \":\" );\n\t\tconst dotIndex = flag.indexOf( \".\" );\n\t\n\t\tconst category = flag.slice( colonIndex + 1, dotIndex );\n\t\tconst level = parseInt( flag.slice( dotIndex + 1 ) );\n\t\n\t\tswitch( category ) {\n\t\tcase \"A\":\n\t\t\tflags[ TwitchMessageFlag.AggressiveContent ] = Math.max(\n\t\t\t\tflags[ TwitchMessageFlag.AggressiveContent ] || 0,\n\t\t\t\tlevel,\n\t\t\t);\n\t\t\tbreak;\n\t\tcase \"I\":\n\t\t\tflags[ TwitchMessageFlag.IdentityBasedHate ] = Math.max(\n\t\t\t\tflags[ TwitchMessageFlag.IdentityBasedHate ] || 0,\n\t\t\t\tlevel,\n\t\t\t);\n\t\t\tbreak;\n\t\tcase \"P\":\n\t\t\tflags[ TwitchMessageFlag.ProfaneContent ] = Math.max(\n\t\t\t\tflags[ TwitchMessageFlag.ProfaneContent ] || 0,\n\t\t\t\tlevel,\n\t\t\t);\n\t\t\tbreak;\n\t\tcase \"S\":\n\t\t\tflags[ TwitchMessageFlag.SexualContent ] = Math.max(\n\t\t\t\tflags[ TwitchMessageFlag.SexualContent ] || 0,\n\t\t\t\tlevel,\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn flags;\n}\n\n// function handleChatMessage( message : ParsedMessage, channel : string ) : ProcessedMessage {\n// \tconst isAction = message.parameters?.startsWith( \"\\u0001ACTION\" );\n// \tconst sanitizedMessage = isAction ? message.parameters?.match( /^\\u0001ACTION ([^\\u0001]+)\\u0001$/ )![ 1 ] : message.parameters;\n\n// \tconst id = message.tags[ \"id\" ];\n// \tconst channelId = message.tags[ \"room-id\" ];\n// \tconst userId = message.tags[ \"user-id\" ];\n// \tconst username = parseUsername( message.source );\n// \tconst displayName = message.tags[ \"display-name\" ] || message.tags[ \"login\" ] || username;\n// \tconst userType = TwitchUserTypes[ message.tags[ \"user-type\" ] ];\n// \tconst badgeInfo =\tmessage.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined;\n// \tconst badges = message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined;\n// \tconst userColor = message.tags[ \"color\" ] || undefined;\n// \tconst emotes = message.tags[ \"emotes\" ];\n// \tconst messageFlags = message.tags[ \"flags\" ];\n// \tconst contentFlags = parseMessageFlags( messageFlags );\n// \tconst isBroadcaster = username === channel;\n// \tconst isMod = message.tags[ \"mod\" ] === \"1\";\n// \tconst isFounder = badges ? !!badges[ \"founder\" ] : false;\n// \tconst isSubscriber = message.tags[ \"subscriber\" ] === \"1\";\n// \tconst isTurbo = message.tags[ \"turbo\" ] === \"1\";\n// \tconst isVIP = badges ? !!badges[ \"vip\" ] : false;\n// \tconst isPrime = badges ? !!badges[ \"premium\" ] : false;\n// \tconst isPartner = badges ? !![ \"partner\" ] : false;\n// \tconst isGameDeveloper = badges ? !!badges[ \"game-developer\" ] : false;\n// \tconst timestamp = parseInt( message.tags[ \"tmi-sent-ts\" ] );\n\t\n// \tconst isEmoteOnly = message.tags[ \"emote-only\" ] === \"1\";\n// \tconst isHighlightedMessage = message.tags[ \"msg-id\" ] === \"highlighted-message\";\n// \tconst isSkipSubsModeMessage = message.tags[ \"msg-id\" ] === \"skip-subs-mode-message\";\n// \tconst customRewardId = message.tags[ \"custom-reward-id\" ] || null;\n\n// \t// TODO: Look into the \"first-msg\" and \"returning-chatter\" tags\n// \tconst isFirstMessage = message.tags[ \"first-msg\" ] === \"1\";\n// \tconst isReturningChatter = message.tags[ \"returning-chatter\" ] === \"1\";\n\n// \tconst flags = {\n// \t\tbroadcaster: isBroadcaster,\n// \t\tmod: isMod,\n// \t\tfounder: isFounder,\n// \t\tsubscriber: isSubscriber,\n// \t\tvip: isVIP,\n// \t\tpartner: isPartner,\n// \t\tgameDeveloper: isGameDeveloper,\n// \t\tturbo: isTurbo,\n// \t\tprime: isPrime,\n// \t\thighlighted: isHighlightedMessage,\n// \t\tskipSubsMode: isSkipSubsModeMessage,\n// \t\tcustomReward: !!customRewardId,\n// \t\temoteOnly: isEmoteOnly,\n// \t\tfirstMessage: isFirstMessage,\n// \t\treturningChatter: isReturningChatter,\n// \t};\n\n// \tif( message.tags[ \"bits\" ] ) {\n// \t\treturn {\n// \t\t\ttype: TwitchEventType.Cheer,\n// \t\t\tdata: {\n// \t\t\t\tchannel,\n// \t\t\t\tchannelId,\n// \t\t\t\tdisplayName,\n// \t\t\t\tusername,\n// \t\t\t\tuserId,\n// \t\t\t\tuserType,\n// \t\t\t\tid,\n// \t\t\t\tmessage: message.parameters,\n// \t\t\t\tmessageType: isAction ? \"action\" : \"chat\", // TODO: Can bits be an action?\n// \t\t\t\tmessageEmotes: emotes,\n// \t\t\t\tmessageFlags,\n// \t\t\t\tcontentFlags,\n// \t\t\t\tisEmoteOnly,\n// \t\t\t\tsubscriber: isSubscriber,\n// \t\t\t\tuserColor,\n// \t\t\t\tuserBadgeInfo: badgeInfo,\n// \t\t\t\tuserBadges: badges,\n// \t\t\t\tcustomRewardId,\n// \t\t\t\tflags,\n// \t\t\t\tbits: parseInt( message.tags[ \"bits\" ] ),\n// \t\t\t\ttimestamp,\n// \t\t\t\textra: {\n// \t\t\t\t\t...message.tags,\n// \t\t\t\t\tflags: messageFlags || null,\n// \t\t\t\t},\n// \t\t\t},\n// \t\t};\n// \t}\n// \telse {\n// \t\tif( sanitizedMessage?.startsWith( \"!\" ) ) {\n// \t\t\tconst msgParts = sanitizedMessage!.split( / (.*)/ );\n// \t\t\tconst command = msgParts[ 0 ].substring( 1 ).toLowerCase();\n// \t\t\tconst msg = msgParts[ 1 ] || \"\";\n// \t\t\treturn {\n// \t\t\t\ttype: TwitchEventType.Command,\n// \t\t\t\tdata: {\n// \t\t\t\t\tchannel,\n// \t\t\t\t\tchannelId,\n// \t\t\t\t\tdisplayName,\n// \t\t\t\t\tusername,\n// \t\t\t\t\tuserId,\n// \t\t\t\t\tuserType,\n// \t\t\t\t\tcommand: command,\n// \t\t\t\t\tid,\n// \t\t\t\t\tmessage: msg,\n// \t\t\t\t\tmessageType: isAction ? \"action\" : \"chat\",\n// \t\t\t\t\tmessageEmotes: emotes,\n// \t\t\t\t\tmessageFlags,\n// \t\t\t\t\tcontentFlags,\n// \t\t\t\t\tisEmoteOnly,\n// \t\t\t\t\tuserColor,\n// \t\t\t\t\tuserBadgeInfo: badgeInfo,\n// \t\t\t\t\tuserBadges: badges,\n// \t\t\t\t\tcustomRewardId,\n// \t\t\t\t\tflags,\n// \t\t\t\t\ttimestamp,\n// \t\t\t\t\textra: {\n// \t\t\t\t\t\t...message.tags,\n// \t\t\t\t\t\tflags: messageFlags || null,\n// \t\t\t\t\t},\n// \t\t\t\t},\n// \t\t\t}\n// \t\t}\n// \t\telse {\n// \t\t\treturn {\n// \t\t\t\ttype: TwitchEventType.Chat,\n// \t\t\t\tdata: {\n// \t\t\t\t\tchannel,\n// \t\t\t\t\tchannelId,\n// \t\t\t\t\tdisplayName,\n// \t\t\t\t\tusername,\n// \t\t\t\t\tuserId,\n// \t\t\t\t\tuserType,\n// \t\t\t\t\tid,\n// \t\t\t\t\tmessage: sanitizedMessage,\n// \t\t\t\t\tmessageType: isAction ? \"action\" : \"chat\",\n// \t\t\t\t\tmessageEmotes: emotes,\n// \t\t\t\t\tmessageFlags,\n// \t\t\t\t\tcontentFlags,\n// \t\t\t\t\tisEmoteOnly,\n// \t\t\t\t\tuserColor,\n// \t\t\t\t\tuserBadgeInfo: badgeInfo,\n// \t\t\t\t\tuserBadges: badges,\n// \t\t\t\t\tcustomRewardId,\n// \t\t\t\t\tflags,\n// \t\t\t\t\ttimestamp,\n// \t\t\t\t\textra: {\n// \t\t\t\t\t\t...message.tags,\n// \t\t\t\t\t\tflags: messageFlags || null,\n// \t\t\t\t\t},\n// \t\t\t\t},\n// \t\t\t};\n// \t\t}\n// \t}\n// }\n\nfunction handleChatMessage( message: ParsedMessage, channel: string ): ProcessedMessage {\n\tconst isAction = message.parameters?.startsWith( \"\\u0001ACTION\" );\n\tconst sanitizedMessage = isAction\n\t\t? message.parameters?.match( /^\\u0001ACTION ([^\\u0001]+)\\u0001$/ )?.[ 1 ]\n\t\t: message.parameters;\n\t\n\tconst tags = message.tags;\n\tconst id = tags[ \"id\" ];\n\tconst channelId = tags[ \"room-id\" ];\n\tconst userId = tags[ \"user-id\" ];\n\tconst username = parseUsername( message.source );\n\tconst displayName = tags[ \"display-name\" ] || tags[ \"login\" ] || username;\n\tconst userType = TwitchUserTypes[ tags[ \"user-type\" ] ];\n\tconst badgeInfo = tags[ \"badge-info\" ] ? parseBadges( tags[ \"badge-info\" ] ) : undefined;\n\tconst badges = tags[ \"badges\" ] ? parseBadges( tags[ \"badges\" ] ) : undefined;\n\tconst userColor = tags[ \"color\" ] || undefined;\n\tconst emotes = tags[ \"emotes\" ];\n\tconst messageFlags = tags[ \"flags\" ];\n\tconst contentFlags = undefined; // parseMessageFlags( messageFlags );\n\t\n\tconst isBroadcaster = username === channel;\n\tconst isMod = tags[ \"mod\" ] === \"1\";\n\tconst isSubscriber = tags[ \"subscriber\" ] === \"1\";\n\tconst isTurbo = tags[ \"turbo\" ] === \"1\";\n\tconst isVIP = badges ? !!badges[ \"vip\" ] : false;\n\tconst isPrime = badges ? !!badges[ \"premium\" ] : false;\n\tconst isPartner = badges ? !!badges[ \"partner\" ] : false;\n\tconst isGameDeveloper = badges ? !!badges[ \"game-developer\" ] : false;\n\tconst isFounder = badges ? !!badges[ \"founder\" ] : false;\n\tconst timestamp = parseInt( tags[ \"tmi-sent-ts\" ] );\n\t\n\tconst isEmoteOnly = tags[ \"emote-only\" ] === \"1\";\n\tconst isHighlightedMessage = tags[ \"msg-id\" ] === \"highlighted-message\";\n\tconst isSkipSubsModeMessage = tags[ \"msg-id\" ] === \"skip-subs-mode-message\";\n\tconst customRewardId = tags[ \"custom-reward-id\" ] || null;\n\t\n\t// TODO: Look into the \"first-msg\" and \"returning-chatter\" tags\n\tconst isFirstMessage = tags[ \"first-msg\" ] === \"1\";\n\tconst isReturningChatter = tags[ \"returning-chatter\" ] === \"1\";\n\t\n\tconst flags = {\n\t\tbroadcaster: isBroadcaster,\n\t\tmod: isMod,\n\t\tfounder: isFounder,\n\t\tsubscriber: isSubscriber,\n\t\tvip: isVIP,\n\t\tpartner: isPartner,\n\t\tgameDeveloper: isGameDeveloper,\n\t\tturbo: isTurbo,\n\t\tprime: isPrime,\n\t\thighlighted: isHighlightedMessage,\n\t\tskipSubsMode: isSkipSubsModeMessage,\n\t\tcustomReward: !!customRewardId,\n\t\temoteOnly: isEmoteOnly,\n\t\tfirstMessage: isFirstMessage,\n\t\treturningChatter: isReturningChatter,\n\t};\n\t\n\tconst commonData = {\n\t\tchannel,\n\t\tchannelId,\n\t\tdisplayName,\n\t\tusername,\n\t\tuserId,\n\t\tuserType,\n\t\tid,\n\t\tmessageType: isAction ? \"action\" : \"chat\",\n\t\tmessageEmotes: emotes,\n\t\tmessageFlags,\n\t\tcontentFlags,\n\t\tisEmoteOnly,\n\t\tuserColor,\n\t\tuserBadgeInfo: badgeInfo,\n\t\tuserBadges: badges,\n\t\tcustomRewardId,\n\t\tflags,\n\t\ttimestamp,\n\t\textra: {\n\t\t\t...tags,\n\t\t\tflags: messageFlags || null,\n\t\t},\n\t};\n\t\n\tif( tags[ \"bits\" ] ) {\n\t\treturn {\n\t\t\ttype: TwitchEventType.Cheer,\n\t\t\tdata: {\n\t\t\t\t...commonData,\n\t\t\t\tmessage: message.parameters,\n\t\t\t\tbits: parseInt( tags[ \"bits\" ] ),\n\t\t\t},\n\t\t};\n\t}\n\telse {\n\t\tconst isCommand = sanitizedMessage?.startsWith( \"!\" );\n\t\tconst msgParts = isCommand ? sanitizedMessage!.split( / (.*)/ ) : null;\n\t\tconst command = isCommand ? msgParts![ 0 ].substring( 1 ).toLowerCase() : null;\n\t\tconst msg = isCommand ? msgParts![ 1 ] || \"\" : null;\n\t\n\t\treturn {\n\t\t\ttype: isCommand ? TwitchEventType.Command : TwitchEventType.Chat,\n\t\t\tdata: {\n\t\t\t\t...commonData,\n\t\t\t\tmessage: isCommand ? msg : sanitizedMessage,\n\t\t\t\tcommand,\n\t\t\t},\n\t\t};\n\t}\n}\t\n\nexport function processMessage( message : ParsedMessage ) : ProcessedMessage | null {\n\ttry {\n\t\tif( message.command ) { // Twitch-Specific Tags: https://dev.twitch.tv/docs/irc/tags/\n\t\t\tconst commandParts = message.command.split( \" \" );\n\t\t\tconst channel = commandParts.length > 1 ? commandParts[ 1 ].substring( 1 ) : undefined;\n\t\t\tswitch( commandParts[ 0 ] ) {\n\t\t\tcase \"PING\":\n\t\t\t\treturn { type: TwitchEventType.Ping\t};\n\t\t\tcase \"PONG\":\n\t\t\t\treturn { type: TwitchEventType.Pong\t};\n\t\t\tcase \"CAP\": // Capabilities Confirmation\n\t\t\t\t// console.debug( \"capabilities\", message.parameters );\n\t\t\t\treturn null;\n\t\t\tcase \"JOIN\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Join,\n\t\t\t\t\tdata: { channel, username: parseUsername( message.source ) },\n\t\t\t\t}\n\t\t\tcase \"PART\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Leave,\n\t\t\t\t\tdata: { channel, username: parseUsername( message.source ) },\n\t\t\t\t}\n\t\t\tcase \"ROOMSTATE\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.RoomState,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t// Only add the properties if they exist\n\t\t\t\t\t\t...( message.tags[ \"broadcaster-lang\" ] && { broadcasterLanguage: message.tags[ \"broadcaster-lang\" ] } ),\n\t\t\t\t\t\t...( message.tags[ \"emote-only\" ] && { emoteOnly: message.tags[ \"emote-only\" ] !== \"0\" } ),\n\t\t\t\t\t\t...( message.tags[ \"followers-only\" ] && { followersOnly: message.tags[ \"followers-only\" ] !== \"-1\" } ),\n\t\t\t\t\t\t...( message.tags[ \"subs-only\" ] && { subscribersOnly: message.tags[ \"subs-only\" ] !== \"0\" } ),\n\t\t\t\t\t\t...( message.tags[ \"r9k\" ] && { r9k: message.tags[ \"r9k\" ] !== \"0\" } ),\n\t\t\t\t\t\t...( message.tags[ \"rituals\" ] && { rituals: message.tags[ \"rituals\" ] !== \"0\" } ),\n\t\t\t\t\t\t...( message.tags[ \"slow\" ] && { slow: message.tags[ \"slow\" ] !== \"0\" } ),\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"GLOBALUSERSTATE\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.GlobalUserState,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ],\n\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\tcolor: message.tags[ \"color\" ],\n\t\t\t\t\t\tbadges: message.tags[ \"badges\" ],\n\t\t\t\t\t\tbadgeInfo: message.tags[ \"badge-info\" ],\n\t\t\t\t\t\temoteSets: message.tags[ \"emote-sets\" ],\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"USERSTATE\":\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.UserState,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tchannel: channel,\n\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ],\n\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\tcolor: message.tags[ \"color\" ],\n\t\t\t\t\t\tbadgeInfo: message.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined,\n\t\t\t\t\t\tbadges: message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined,\n\t\t\t\t\t\temoteSets: message.tags[ \"emote-sets\" ],\n\t\t\t\t\t\t...( message.tags[ \"id\" ] && { id: message.tags[ \"id\" ] } ),\n\t\t\t\t\t\tmod: message.tags[ \"mod\" ] === \"1\",\n\t\t\t\t\t\tsubscriber: message.tags[ \"subscriber\" ] === \"1\",\n\t\t\t\t\t\tturbo: message.tags[ \"turbo\" ] === \"1\",\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"HOSTTARGET\": // No longer supported\n\t\t\t\tbreak;\n\t\t\tcase \"USERNOTICE\":\n\t\t\t\tswitch( message.tags[ \"msg-id\" ] ) {\n\t\t\t\tcase \"announcement\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Announcement,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\tmessageEmotes: message.tags[ \"emotes\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"sub\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Subscribe,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tid: message.tags[ \"id\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tmonths: parseInt( message.tags[ \"msg-param-months\" ] ),\n\t\t\t\t\t\t\tmultiMonthDuration: parseInt( message.tags[ \"msg-param-multimonth-duration\" ] ),\n\t\t\t\t\t\t\tmultiMonthTenure: parseInt( message.tags[ \"msg-param-multimonth-tenure\" ] ),\n\t\t\t\t\t\t\tshouldShareStreak: message.tags[ \"msg-param-should-share-streak\" ] === \"1\",\n\t\t\t\t\t\t\tsubPlan: message.tags[ \"msg-param-sub-plan\" ],\n\t\t\t\t\t\t\tsubPlanName: message.tags[ \"msg-param-sub-plan-name\" ],\n\t\t\t\t\t\t\twasGifted: message.tags[ \"msg-param-was-gifted\" ] === \"true\",\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-contribution-type\" ] && { goalContributionType: message.tags[ \"msg-param-goal-contribution-type\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-current-contributions\" ] && { goalCurrentContributions: parseInt( message.tags[ \"msg-param-goal-current-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-description\" ] && { goalDescription: message.tags[ \"msg-param-goal-description\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-target-contributions\" ] && { goalTargetContributions: parseInt( message.tags[ \"msg-param-goal-target-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-user-contributions\" ] && { goalUserContributions: parseInt( message.tags[ \"msg-param-goal-user-contributions\" ] ) } ),\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\t\tuserBadgeInfo: message.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined,\n\t\t\t\t\t\t\tuserBadges: message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined,\n\t\t\t\t\t\t\tuserColor: message.tags[ \"color\" ] || undefined,\n\t\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\tmessageEmotes: message.tags[ \"emotes\" ],\n\t\t\t\t\t\t\tmessageFlags: message.tags[ \"flags\" ],\n\t\t\t\t\t\t\tcontentFlags: parseMessageFlags( message.tags[ \"flags\" ] ),\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"resub\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Resubscribe,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tid: message.tags[ \"id\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tcumulativeMonths: parseInt( message.tags[ \"msg-param-cumulative-months\" ] ),\n\t\t\t\t\t\t\tmonths: parseInt( message.tags[ \"msg-param-months\" ] ),\n\t\t\t\t\t\t\tmultiMonthDuration: parseInt( message.tags[ \"msg-param-multimonth-duration\" ] ),\n\t\t\t\t\t\t\tmultiMonthTenure: parseInt( message.tags[ \"msg-param-multimonth-tenure\" ] ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-streak-months\" ] && { streakMonths: parseInt( message.tags[ \"msg-param-streak-months\" ] ) } ),\n\t\t\t\t\t\t\tshouldShareStreak: message.tags[ \"msg-param-should-share-streak\" ] === \"1\",\n\t\t\t\t\t\t\tsubPlan: message.tags[ \"msg-param-sub-plan\" ],\n\t\t\t\t\t\t\tsubPlanName: message.tags[ \"msg-param-sub-plan-name\" ],\n\t\t\t\t\t\t\twasGifted: message.tags[ \"msg-param-was-gifted\" ] === \"true\",\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\t\tuserBadgeInfo: message.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined,\n\t\t\t\t\t\t\tuserBadges: message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined,\n\t\t\t\t\t\t\tuserColor: message.tags[ \"color\" ] || undefined,\n\t\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\tmessageEmotes: message.tags[ \"emotes\" ],\n\t\t\t\t\t\t\tmessageFlags: message.tags[ \"flags\" ],\n\t\t\t\t\t\t\tcontentFlags: parseMessageFlags( message.tags[ \"flags\" ] ),\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"submysterygift\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.MysterySubGift,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tid: message.tags[ \"id\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tgiftCount: parseInt( message.tags[ \"msg-param-mass-gift-count\" ] ),\n\t\t\t\t\t\t\tsenderCount: parseInt( message.tags[ \"msg-param-sender-count\" ] || \"0\" ),\n\t\t\t\t\t\t\tsubPlan: message.tags[ \"msg-param-sub-plan\" ],\n\t\t\t\t\t\t\tsubPlanName: message.tags[ \"msg-param-sub-plan-name\" ],\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-contribution-type\" ] && { goalContributionType: message.tags[ \"msg-param-goal-contribution-type\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-current-contributions\" ] && { goalCurrentContributions: parseInt( message.tags[ \"msg-param-goal-current-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-description\" ] && { goalDescription: message.tags[ \"msg-param-goal-description\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-target-contributions\" ] && { goalTargetContributions: parseInt( message.tags[ \"msg-param-goal-target-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-user-contributions\" ] && { goalUserContributions: parseInt( message.tags[ \"msg-param-goal-user-contributions\" ] ) } ),\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\t\tuserBadgeInfo: message.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined,\n\t\t\t\t\t\t\tuserBadges: message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined,\n\t\t\t\t\t\t\tuserColor: message.tags[ \"color\" ] || undefined,\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"subgift\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.SubGift,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tid: message.tags[ \"id\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\trecipientDisplayName: message.tags[ \"msg-param-recipient-display-name\" ],\n\t\t\t\t\t\t\trecipientId: message.tags[ \"msg-param-recipient-id\" ],\n\t\t\t\t\t\t\trecipientUsername: message.tags[ \"msg-param-recipient-user-name\" ],\n\t\t\t\t\t\t\tmonths: parseInt( message.tags[ \"msg-param-months\" ] ),\n\t\t\t\t\t\t\tgiftMonths: parseInt( message.tags[ \"msg-param-gift-months\" ] ),\n\t\t\t\t\t\t\tsenderCount: parseInt( message.tags[ \"msg-param-sender-count\" ] || \"0\" ), // How many all-time total gift subs sender has sent the channel\n\t\t\t\t\t\t\tsubPlan: message.tags[ \"msg-param-sub-plan\" ],\n\t\t\t\t\t\t\tsubPlanName: message.tags[ \"msg-param-sub-plan-name\" ],\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-contribution-type\" ] && { goalContributionType: message.tags[ \"msg-param-goal-contribution-type\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-current-contributions\" ] && { goalCurrentContributions: parseInt( message.tags[ \"msg-param-goal-current-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-description\" ] && { goalDescription: message.tags[ \"msg-param-goal-description\" ] } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-target-contributions\" ] && { goalTargetContributions: parseInt( message.tags[ \"msg-param-goal-target-contributions\" ] ) } ),\n\t\t\t\t\t\t\t...( message.tags[ \"msg-param-goal-user-contributions\" ] && { goalUserContributions: parseInt( message.tags[ \"msg-param-goal-user-contributions\" ] ) } ),\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\t\tuserBadgeInfo: message.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined,\n\t\t\t\t\t\t\tuserBadges: message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined,\n\t\t\t\t\t\t\tuserColor: message.tags[ \"color\" ] || undefined,\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"giftpaidupgrade\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.SubGiftContinue,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tid: message.tags[ \"id\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tgifterDisplayName: message.tags[ \"msg-param-sender-name\" ] || message.tags[ \"msg-param-sender-login\" ],\n\t\t\t\t\t\t\tgifterUsername: message.tags[ \"msg-param-sender-login\" ],\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\t\tuserBadgeInfo: message.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined,\n\t\t\t\t\t\t\tuserBadges: message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined,\n\t\t\t\t\t\t\tuserColor: message.tags[ \"color\" ] || undefined,\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"raid\":\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Raid,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tid: message.tags[ \"id\" ],\n\t\t\t\t\t\t\tprofileImageURL: message.tags[ \"msg-param-profileImageURL\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"msg-param-displayName\" ] || message.tags[ \"display-name\" ] || message.tags[ \"msg-param-login\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tviewers: parseInt( message.tags[ \"msg-param-viewerCount\" ] ),\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"msg-param-login\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\t// TODO: Add flags and badges\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"unraid\":\n\t\t\t\t\tconsole.log( message );\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Unraid,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tid: message.tags[ \"id\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tchannel: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\t\tuserBadgeInfo: message.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined,\n\t\t\t\t\t\t\tuserBadges: message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined,\n\t\t\t\t\t\t\tuserColor: message.tags[ \"color\" ] || undefined,\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase \"viewermilestone\":\n\t\t\t\t\tconsole.log( message );\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.ViewerMilestone,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tid: message.tags[ \"id\" ],\n\t\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\t\tmessageType: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\t\tcategory: message.tags[ \"msg-param-category\" ],\n\t\t\t\t\t\t\tmilestoneId: message.tags[ \"msg-param-id\" ],\n\t\t\t\t\t\t\tmilestoneValue: parseInt( message.tags[ \"msg-param-value\" ] ),\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log( \"TODO IMPLEMENT COMMAND\", message );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"WHISPER\":\n\t\t\t\t// TODO: Check for OAuth password and scope for reading whispers\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Whisper,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ] || parseUsername( message.source ),\n\t\t\t\t\t\tusername: parseUsername( message.source ),\n\t\t\t\t\t\tuserId: message.tags[ \"user-id\" ],\n\t\t\t\t\t\tuserType: TwitchUserTypes[ message.tags[ \"user-type\" ] ],\n\t\t\t\t\t\tuserColor: message.tags[ \"color\" ] || undefined,\n\t\t\t\t\t\tuserBadgeInfo: message.tags[ \"badge-info\" ] ? parseBadges( message.tags[ \"badge-info\" ] ) : undefined,\n\t\t\t\t\t\tuserBadges: message.tags[ \"badges\" ] ? parseBadges( message.tags[ \"badges\" ] ) : undefined,\n\t\t\t\t\t\tmessageEmotes: message.tags[ \"emotes\" ],\n\t\t\t\t\t\tturbo: message.tags[ \"turbo\" ] === \"1\",\n\t\t\t\t\t\tthreadId: message.tags[ \"thread-id\" ],\n\t\t\t\t\t\tmessageId: message.tags[ \"message-id\" ],\n\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\tmessageType: \"whisper\",\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"NOTICE\": // Notice Message IDs: https://dev.twitch.tv/docs/irc/msg-id/\n\t\t\t\t// Check for errors\n\t\t\t\tif( message.parameters?.includes( \"Login unsuccessful\" ) || message.parameters?.includes( \"Login authentication failed\" ) ||\n\t\t\t\t\tmessage.parameters?.includes( \"Error logging in\" ) || message.parameters?.includes( \"Improperly formatted auth\" ) ||\n\t\t\t\t\tmessage.parameters?.includes( \"Invalid NICK\" ) || message.parameters?.includes( \"Invalid CAP REQ\" ) ) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.Error,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// General Notice Event\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.Notice,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tmsgId: message.tags[ \"msg-id\" ],\n\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"CLEARCHAT\":\n\t\t\t\t// Chat Cleared, User Timeout/Ban\n\t\t\t\tif( message.tags[ \"target-user-id\" ] ) {\n\t\t\t\t\tif( message.tags[ \"ban-duration\" ] ) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: TwitchEventType.Timeout,\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\t\tduration: parseInt( message.tags[ \"ban-duration\" ] ),\n\t\t\t\t\t\t\t\tusername: message.parameters,\n\t\t\t\t\t\t\t\tuserId: message.tags[ \"target-user-id\" ],\n\t\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: TwitchEventType.Ban,\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\t\tusername: message.parameters,\n\t\t\t\t\t\t\t\tuserId: message.tags[ \"target-user-id\" ],\n\t\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: TwitchEventType.ClearChat,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tchannel,\n\t\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ],\n\t\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\tcase \"CLEARMSG\":\n\t\t\t\t// Message Deleted\n\t\t\t\treturn {\n\t\t\t\t\ttype: TwitchEventType.MessageDeleted,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tchannel,\n\t\t\t\t\t\tchannelId: message.tags[ \"room-id\" ], // Room ID seems to be empty for this event\n\t\t\t\t\t\tdisplayName: message.tags[ \"display-name\" ] || message.tags[ \"login\" ],\n\t\t\t\t\t\tusername: message.tags[ \"login\" ],\n\t\t\t\t\t\tid: message.tags[ \"target-msg-id\" ],\n\t\t\t\t\t\tmessage: message.parameters,\n\t\t\t\t\t\ttimestamp: parseInt( message.tags[ \"tmi-sent-ts\" ] ),\n\t\t\t\t\t\textra: message.tags,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase \"PRIVMSG\":\n\t\t\t\t// Chat Message\n\t\t\t\treturn handleChatMessage( message, channel as string );\n\t\t\tcase \"RECONNECT\":\t\n\t\t\t\tconsole.log( \"The Twitch IRC server is about to terminate the connection for maintenance.\" )\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t{\n\t\t\t\t\t// Try and parse a numeric command based on RFC1459 (https://www.rfc-editor.org/rfc/rfc1459.html)\n\t\t\t\t\tconst commandNumber = parseInt( commandParts[ 0 ] );\n\t\t\t\t\tif( commandNumber >= 400 ) {\n\t\t\t\t\t\tconsole.debug( `Error IRC command: ${commandNumber}`, message );\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Command & Reserved responses\n\t\t\t\t\t\tswitch( commandNumber ) {\n\t\t\t\t\t\tcase 1:\t// Logged in (successfully authenticated). \n\t\t\t\t\t\t\t// console.debug( \"Username:\", channel );\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tcase 2: // Ignoring all other numeric messages.\n\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\tcase 353: // Get the names of users in the room\n\t\t\t\t\t\tcase 366: // End of names list\n\t\t\t\t\t\tcase 372: // Message Of The Day\n\t\t\t\t\t\tcase 375: // Message Of The Day Start\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tcase 376: // End of Message Of The Day\n\t\t\t\t\t\t\treturn { type: TwitchEventType.Connect, data: { username: commandParts[ 1 ] } };\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.debug( \"Unsupported numeric command\", commandNumber );\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.debug( \"Unprocessed IRC message:\", message.raw );\n\t\t}\n\t}\n\tcatch( error ) {\n\t\tconsole.error( error );\n\t\treturn {\n\t\t\ttype: TwitchEventType.Warning,\n\t\t\tdata: error,\n\t\t};\n\t}\n\tconsole.log( message );\n\treturn null;\n}\n\nexport function requestCapabilities( ws : WebSocket ) : void {\n\t// Request Twitch-specific Capabilities\n\t// TODO: consider adding twitch.tv/membership CAP to get JOIN and PART events\n\tws.send( \"CAP REQ :twitch.tv/tags twitch.tv/commands\" );\n}\n\nexport function authenticate( ws : WebSocket, username? : string, password? : string ) : void {\n\tconst ircUsername = password ? username : `justinfan${Math.floor( ( Math.random() * 99998999 ) + 1000 )}`;\n\tconst ircPassword = password || `INSTAFLUFF`;\n\tws.send( `PASS ${ircPassword}` );\n\tws.send( `NICK ${ircUsername}` );\n}\n\nexport function joinChannel( ws : WebSocket, channel : string | string[] ) : void {\n\tif( Array.isArray( channel ) ) {\n\t\t// TODO: Check for too many channels and then split into multiple requests\n\t\tconst channels = channel.map( c => `#${c}` ).join( \",\" );\n\t\tws.send( `JOIN ${channels}` );\n\t}\n\telse {\n\t\tws.send( `JOIN #${channel}` );\n\t}\n}\n\nexport function leaveChannel( ws : WebSocket, channel : string ) : void {\n\tws.send( `PART #${channel}` );\n}\n\nexport function ping( ws : WebSocket ) : void {\n\tws.send( `PING` );\n}\n\nexport function pong( ws : WebSocket ) : void {\n\tws.send( `PONG` );\n}\n\nexport function sendChat( ws : WebSocket, channel : string, message : string ) : void {\n\t// Note: If we want to send tags like client-nonce, then the chat message should look like\n\t//\t\t\t @client-nonce=asdf;reply-parent-msg-id PRIVMSG #channel :message text here\n\tws.send( `PRIVMSG #${channel} :${message}` );\n}\n\nexport function replyChat( ws : WebSocket, channel : string, messageId : string, message : string ) : void {\n\t// console.debug( `@reply-parent-msg-id=${messageId} PRIVMSG #${channel} :${message}` );\n\tws.send( `@reply-parent-msg-id=${messageId} PRIVMSG #${channel} :${message}` );\n}\n","import { parseMessage } from \"./parse\";\nimport { createWebSocket } from \"./socket\";\nimport { authenticate, joinChannel, leaveChannel, ping, pong, ProcessedMessage, processMessage, replyChat, requestCapabilities, sendChat, TwitchEventType } from \"./twitch\";\n\nexport type TwitchEventHandler = ( context? : any ) => void;\nexport type TwitchChatMode = {\n\temoteOnly : boolean;\n\tfollowersOnly : boolean;\n\tsubscribersOnly : boolean;\n\tr9k : boolean; // Unique Chat Mode\n\tslow : boolean;\n\tlanguage : string;\n};\n\nexport class TwitchEvents {\n\t#ws : WebSocket | undefined;\n\t#username : string;\n\t#password : string | undefined;\n\t#pingTimer : ReturnType<typeof setInterval> | undefined;\n\t#pingTime : number = 0;\n\t#latency : number = -1;\n\tdebug : boolean;\n\treconnects : number = 0;\n\tchannels : string[];\n\tchatModes : { [ channel : string ] : TwitchChatMode } = {};\n\thandlers : Partial<{ [ key in TwitchEventType ] : TwitchEventHandler | undefined }> = {};\n\n\tconstructor( username : string, password? : string, channels? : string[] | string, isDebug? : boolean ) {\n\t\tthis.#username = username;\n\t\tthis.#password = password;\n\t\tthis.debug = !!isDebug;\n\n\t\t// Ensure that channels is an array\n\t\tif( typeof channels === \"string\" || channels instanceof String ) {\n\t\t\tchannels = [ channels as string ];\n\t\t}\n\t\tthis.channels = channels || [ username ]; // Use username as the channel to join by default\n\n\t\t// Connect to the server\n\t\tthis.#connect();\n\t}\n\n\tget #mainChannel() : string { return this.channels[ 0 ]; }\n\tget #isConnected() : boolean { return !!( this.#ws && this.#ws.readyState === this.#ws.OPEN ); }\n\tget version() : string { return \"2.0.0\"; }\n\tget latency() : number { return this.#latency; }\n\tget ws() : WebSocket | undefined { return this.#ws; }\n\n\ton( eventType : TwitchEventType, handler : ( context? : any ) => void ) {\n\t\tthis.handlers[ eventType ] = handler;\n\t}\n\n\tsay( message : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tsendChat( this.#ws, channel || this.#mainChannel, message );\n\t}\n\n\treply( messageId : string, message : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\treplyChat( this.#ws, channel || this.#mainChannel, messageId, message );\n\t}\n\n\tjoin( channel : string | string[] ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tjoinChannel( this.#ws, channel );\n\t\t// TODO: add channel to this.channels\n\t}\n\n\tleave( channel : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tleaveChannel( this.#ws, channel );\n\t\t// TODO: remove channel from this.channels\n\t}\n\n\tdeleteMessage( messageId : string, channel? : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\t// TODO: This requires an API call\n\t\t// https://dev.twitch.tv/docs/api/reference/#delete-chat-messages\n\t}\n\n\tsimulateIRCMessage( message : string ) : void {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tthis.#onMessage( { \"data\": message } as MessageEvent );\n\t}\n\n\t#connect() {\n\t\tif( this.#isConnected ) { return; } // Already connected\n\n\t\tconst TwitchServerWSS = \"wss://irc-ws.chat.twitch.tv:443\";\n\t\t// const TwitchServerWS = \"ws://irc-ws.chat.twitch.tv:80\";\n\n\t\tthis.#ws = createWebSocket( TwitchServerWSS, \"irc\" );\n\t\tthis.#ws.onopen = () => { this.#onOpen(); };\n\t\tthis.#ws.onmessage = ( event ) => { this.#onMessage( event ); };\n\t\tthis.#ws.onerror = ( event ) => { this.#onError( event ); };\n\t\tthis.#ws.onclose = ( event ) => { this.#onClose( event ); };\n\t}\n\n\t#onOpen() {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\trequestCapabilities( this.#ws );\n\t\tauthenticate( this.#ws, this.#username, this.#password );\n\t}\n\n\t#onError( event : Event ) {\n\t\tconsole.error( \"ERROR\", event );\n\t}\n\n\t#onClose( event : Event ) {\n\t\tconsole.info( \"CLOSE\", event );\n\t\tif( this.#pingTimer ) {\n\t\t\tclearInterval( this.#pingTimer );\n\t\t}\n\t}\n\n\t#ping() {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tthis.#pingTime = Date.now();\n\t\tping( this.#ws );\n\t}\n\n\t#handleSpecialEvents( message : ProcessedMessage ) {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tswitch( message.type ) {\n\t\tcase TwitchEventType.Connect:\n\t\t\tthis.#username = message.data.username;\n\t\t\t// Setup the keep-alive ping timer\n\t\t\tif( this.#pingTimer ) {\n\t\t\t\tclearInterval( this.#pingTimer );\n\t\t\t}\n\t\t\tthis.#pingTimer = setInterval( () => {\n\t\t\t\tthis.#ping();\n\t\t\t}, 60000 );\n\t\t\t// Get the base hostname from the url\n\t\t\tconst hostUrl = new URL( this.#ws.url );\n\t\t\tmessage.data[ \"address\" ] = hostUrl.host;\n\t\t\tmessage.data[ \"port\" ] = hostUrl.protocol === \"wss:\" ? 443 : 80;\n\t\t\tmessage.data[ \"isFirstConnect\" ] = this.reconnects === 0;\n\n\t\t\t// Join the channels\n\t\t\tjoinChannel( this.#ws, this.channels );\n\t\t\tbreak;\n\t\tcase TwitchEventType.Ping:\n\t\t\tpong( this.#ws );\n\t\t\tbreak;\n\t\tcase TwitchEventType.Pong:\n\t\t\t// Calculate and attach latency to the data\n\t\t\tmessage.data = message.data || {};\n\t\t\tthis.#latency = message.data[ \"latency\" ] = ( Date.now() - this.#pingTime ); // Latency in milliseconds\n\t\t\tbreak;\n\t\tcase TwitchEventType.RoomState:\n\t\t\t// Save ChatMode for the room at the first message and then diff the notifications afterwards\n\t\t\t// e.g. emoteOnly & followersOnly are both sent in the initial message but then enabling/disabling emoteOnly doesn't send the followersOnly mode flag\n\t\t\tthis.chatModes[ message.data.channel ] = {\n\t\t\t\t...this.chatModes[ message.data.channel ],\n\t\t\t\t...message.data,\n\t\t\t};\n\t\t\t// TODO: delete chatMode when leaving a channel\n\t\t\tif( this.handlers[ TwitchEventType.ChatMode ] ) {\n\t\t\t\tthis.handlers[ TwitchEventType.ChatMode ]!( this.chatModes[ message.data.channel ] );\n\t\t\t}\n\t\t\tbreak;\n\t\t// case TwitchEventType.Reconnect:\n\t\t// \tthis.#connect();\n\t\t// \tbreak;\n\t\t// case TwitchEventType.Join:\n\t\t// \tif( message.channel ) {\n\t\t// \t\tthis.channels.push( message.channel );\n\t\t// \t}\n\t\t// \tbreak;\n\t\tcase TwitchEventType.Error:\n\t\t\tthis.#ws.close();\n\t\t\tbreak;\n\t\tcase TwitchEventType.Whisper:\n\t\t\t// Add the self flag to the messageData\n\t\t\tmessage.data.self = message.data.username === this.#username;\n\t\t\tbreak;\n\t\tcase TwitchEventType.Chat:\n\t\t\t// Add the self flag to the messageData\n\t\t\tmessage.data.self = message.data.username === this.#username;\n\t\t\t// Check if there is a reply handler and this is a reply message\n\t\t\tif( this.handlers[ TwitchEventType.Reply ] && message.data.extra[ \"reply-parent-msg-id\" ] ) {\n\t\t\t\tthis.handlers[ TwitchEventType.Reply ]!( {\n\t\t\t\t\t...message.data,\n\t\t\t\t\tparentId: message.data.extra[ \"reply-parent-msg-id\" ],\n\t\t\t\t\tparentUserId: message.data.extra[ \"reply-parent-user-id\" ],\n\t\t\t\t\tparentUser: message.data.extra[ \"reply-parent-user-login\" ],\n\t\t\t\t\tparentMessage: message.data.extra[ \"reply-parent-msg-body\" ],\n\t\t\t\t\tparentDisplayName: message.data.extra[ \"reply-parent-display-name\" ] || message.data.extra[ \"reply-parent-user-login\" ],\n\t\t\t\t} );\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t#onMessage( event : MessageEvent<any> ) {\n\t\tif( !this.#ws ) { return; }\n\t\tif( !this.#isConnected ) { return; }\n\n\t\tconst parts = event.data.trim().split( `\\r\\n` );\n\t\tfor( const str of parts ) {\n\t\t\tconst message = processMessage( parseMessage( str ) );\n\t\t\tif( message && message.type !== TwitchEventType.None ) {\n\t\t\t\t// console.log( message );\n\t\t\t\t// Handle special events\n\t\t\t\tthis.#handleSpecialEvents( message );\n\n\t\t\t\t// Send the event to handlers\n\t\t\t\tif( this.handlers[ message.type ] ) {\n\t\t\t\t\tthis.handlers[ message.type ]!( message.data );\n\t\t\t\t}\n\t\t\t\t// Also send to the \"all\" event handler if it exists\n\t\t\t\tif( this.handlers[ TwitchEventType.All ] ) {\n\t\t\t\t\tthis.handlers[ TwitchEventType.All ]!( {\n\t\t\t\t\t\tevent: message.type,\n\t\t\t\t\t\t...message.data,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\t// console.debug( message );\n\t\t\t}\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tif( this.#ws && this.#ws.readyState !== this.#ws.CLOSED ) {\n\t\t\tthis.#ws.close();\n\t\t}\n\t}\n}\n","// Comfy.JS v2.0.0\nimport { TwitchEvents } from \".\";\nimport { TwitchEventType } from \"./twitch\";\n\nexport type ComfyJSInstance = {\n\tversion: () => string;\n\tlatency: () => number;\n\tgetInstance: () => TwitchEvents | undefined;\n\tonConnected: ( address : string, port : number, isFirstConnect : boolean ) => void;\n\tonReconnect: ( reconnectCount : number ) => void;\n\tonError: ( error : Error ) => void;\n\tonCommand: ( user : string, command : string, message : string, flags : any, extra : any ) => void;\n\tonChat: ( user : string, message : string, flags : any, self : boolean, extra : any ) => void;\n\tonWhisper: ( user : string, message : string, flags : any, self : boolean, extra : any ) => void;\n\tonCheer: ( user : string, message : string, bits : number, flags : any, extra : any ) => void;\n\tonSub: ( user : string, message : string, subTierInfo : any, extra : any ) => void;\n\tonResub: ( user : string, message : string, streamMonths : number, cumulativeMonths : number, subTierInfo : any, extra : any ) => void;\n\tonSubGift: ( gifterUser : string, streakMonths : number, recipientUser : string, senderCount : number, subTierInfo : any, extra : any ) => void;\n\tonSubMysteryGift: ( gifterUser : string, numbOfSubs : number, senderCount : number, subTierInfo : any, extra : any ) => void;\n\tonGiftSubContinue: ( user : string, sender : string, extra : any ) => void;\n\tonTimeout: ( user : string, duration : number, extra : any ) => void;\n\tonBan: ( user : string, extra : any ) => void;\n\tonMessageDeleted: ( messageId : string, extra : any ) => void;\n\tonRaid: ( user : string, viewers : number, extra : any ) => void;\n\tonUnraid: ( channel : string, extra : any ) => void;\n\tsimulateIRCMessage: ( message : string ) => void;\n\tInit: ( username : string, password? : string, channels? : string[] | string, isDebug? : boolean ) => void;\n};\n\nlet twitchEvents : TwitchEvents | undefined;\n\nfunction parseMessageEmotes( messageEmotes : string ) : any | null {\n\tif( messageEmotes ) {\n\t\tconst emotes = messageEmotes.split( \"/\" );\n\t\tconst emoteMap : any = {};\n\t\tfor( const emote of emotes ) {\n\t\t\tconst [ id, positions ] = emote.split( \":\" );\n\t\t\temoteMap[ id ] = positions.split( \",\" );\n\t\t}\n\t\treturn emoteMap;\n\t}\n\treturn null;\n}\n\nfunction convertContextToUserState( context : any ) : { [ key : string ] : string } {\n\tconst userState : any = {};\n\tfor( const key in context.extra ) {\n\t\tif( context.extra[ key ] === \"\" ) {\n\t\t\tuserState[ key ] = null;\n\t\t}\n\t\telse if( context.extra[ key ] === \"1\" ) {\n\t\t\tuserState[ key ] = true;\n\t\t}\n\t\telse if( context.extra[ key ] === \"0\" ) {\n\t\t\tuserState[ key ] = false;\n\t\t}\n\t\telse {\n\t\t\tuserState[ key ] = context.extra[ key ];\n\t\t}\n\t}\n\tuserState[ \"badge-info-raw\" ] = userState[ \"badge-info\" ];\n\tuserState[ \"badge-info\" ] = context.userBadgeInfo || null;\n\tuserState[ \"badges-raw\" ] = userState.badges;\n\tuserState.badges = context.userBadges || null;\n\tuserState[ \"emotes-raw\" ] = userState.emotes;\n\tuserState.emotes = parseMessageEmotes( context.messageEmotes );\n\tuserState.username = context.username;\n\tuserState[ \"message-type\" ] = context.messageType;\n\treturn userState;\n}\n\nconst comfyJS : ComfyJSInstance = {\n\tversion: () => { return \"2.0.0\"; },\n\tlatency: () => { return twitchEvents ? twitchEvents.latency : -1; },\n\tgetInstance: () => { return twitchEvents; },\n\tonConnected: ( address : string, port : number, isFirstConnect : boolean ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onConnected default handler\" );\n\t\t}\n\t},\n\tonReconnect: ( reconnectCount : number ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onReconnect default handler\" );\n\t\t}\n\t},\n\tonError: ( error : Error ) => {\n\t\tconsole.error( \"Error:\", error );\n\t},\n\tonCommand: ( user : string, command : string, message : string, flags : any, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onCommand default handler\" );\n\t\t}\n\t},\n\tonChat: ( user : string, message : string, flags : any, self : boolean, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onChat default handler\" );\n\t\t}\n\t},\n\tonCheer: ( user : string, message : string, bits : number, flags : any, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onCheer default handler\" );\n\t\t}\n\t},\n\tonWhisper: ( user : string, message : string, flags : any, self : boolean, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onWhisper default handler\" );\n\t\t}\n\t},\n\tonSub: ( user : string, message : string, subTierInfo : any, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onSub default handler\" );\n\t\t}\n\t},\n\tonResub: ( user : string, message : string, streamMonths : number, cumulativeMonths : number, subTierInfo : any, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onResub default handler\" );\n\t\t}\n\t},\n\tonSubGift: ( gifterUser : string, streakMonths : number, recipientUser : string, senderCount : number, subTierInfo : any, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onSubGift default handler\" );\n\t\t}\n\t},\n\tonSubMysteryGift: ( gifterUser : string, numbOfSubs : number, senderCount : number, subTierInfo : any, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onSubMysteryGift default handler\" );\n\t\t}\n\t},\n\tonGiftSubContinue: ( user : string, sender : string, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onGiftSubContinue default handler\" );\n\t\t}\n\t},\n\tonTimeout: ( user : string, duration : number, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onTimeout default handler\" );\n\t\t}\n\t},\n\tonBan: ( user : string, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onBan default handler\" );\n\t\t}\n\t},\n\tonMessageDeleted: ( messageID : string, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onMessageDeleted default handler\" );\n\t\t}\n\t},\n\tonRaid: ( user : string, viewers : number, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onRaid default handler\" );\n\t\t}\n\t},\n\tonUnraid: ( channel : string, extra : any ) => {\n\t\tif( twitchEvents && twitchEvents.debug ) {\n\t\t\tconsole.debug( \"onUnraid default handler\" );\n\t\t}\n\t},\n\tsimulateIRCMessage: ( message : string ) => {\n\t\tif( twitchEvents ) {\n\t\t\ttwitchEvents.simulateIRCMessage( message );\n\t\t}\n\t},\n\tInit: ( username : string, password? : string, channels? : string[] | string, isDebug? : boolean ) => {\n\t\ttwitchEvents = new TwitchEvents( username, password, channels, isDebug );\n\t\ttwitchEvents.on( TwitchEventType.Connect, ( context? : any ) => {\n\t\t\tcomfyJS.onConnected( context.address, context.port, context.isFirstConnect );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Reconnect, ( context? : any ) => {\n\t\t\tconsole.log( \"RECONNECT\" );\n\t\t\tcomfyJS.onReconnect( context.reconnectCount );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Error, ( error : Error ) => {\n\t\t\tcomfyJS.onError( error );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Command, ( context? : any ) => {\n\t\t\tcomfyJS.onCommand( context.displayName || context.username, context.command, context.message, context.flags, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Chat, ( context? : any ) => {\n\t\t\tcomfyJS.onChat( context.displayName || context.username, context.message, context.flags, context.self, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Whisper, ( context? : any ) => {\n\t\t\tcomfyJS.onWhisper( context.displayName || context.username, context.message, context.flags, context.self, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, channel: context.username, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Cheer, ( context? : any ) => {\n\t\t\tcomfyJS.onCheer( context.displayName || context.username, context.message, context.bits, context.flags, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Subscribe, ( context? : any ) => {\n\t\t\tcomfyJS.onSub( context.displayName || context.username, context.message, { prime: context.subPlan === \"Prime\", plan: context.subPlan, planName: context.subPlanName || null }, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Resubscribe, ( context? : any ) => {\n\t\t\tcomfyJS.onResub( context.displayName || context.username, context.message, context.streakMonths || 0, context.cumulativeMonths, { prime: context.subPlan === \"Prime\", plan: context.subPlan, planName: context.subPlanName || null }, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.SubGift, ( context? : any ) => {\n\t\t\tcomfyJS.onSubGift( context.displayName || context.username, context.streakMonths || 0, context.recipientDisplayName, context.senderCount, { prime: context.subPlan === \"Prime\", plan: context.subPlan, planName: context.subPlanName || null }, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.MysterySubGift, ( context? : any ) => {\n\t\t\tcomfyJS.onSubMysteryGift( context.displayName || context.username, context.giftCount, context.senderCount, { prime: context.subPlan === \"Prime\", plan: context.subPlan, planName: context.subPlanName || null }, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ), userMassGiftCount: context.giftCount } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.SubGiftContinue, ( context? : any ) => {\n\t\t\tcomfyJS.onGiftSubContinue( context.displayName || context.username, context.gifterDisplayName, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Timeout, ( context? : any ) => {\n\t\t\tcomfyJS.onTimeout( context.displayName || context.username, context.duration, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ), timedOutUserId: context.userId } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Ban, ( context? : any ) => {\n\t\t\tcomfyJS.onBan( context.displayName || context.username, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ), bannedUserId: context.userId } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.MessageDeleted, ( context? : any ) => {\n\t\t\tcomfyJS.onMessageDeleted( context.id, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Raid, ( context? : any ) => {\n\t\t\tcomfyJS.onRaid( context.displayName || context.username, context.viewers, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t\ttwitchEvents.on( TwitchEventType.Unraid, ( context? : any ) => {\n\t\t\tcomfyJS.onUnraid( context.channel, { ...context, userState: convertContextToUserState( context ), extra: null, flags: context.extra?.flags, roomId: context.channelId, messageEmotes: parseMessageEmotes( context.messageEmotes ) } );\n\t\t} );\n\t},\n};\n\ndeclare global {\n\tinterface Window {\n\t\tComfyJSNew: ComfyJSInstance;\n\t}\n}\n\n// Expose everything, for browser and Node..\nif( typeof module !== \"undefined\" && module.exports ) {\n\tmodule.exports = comfyJS;\n}\n\nif( typeof window !== \"undefined\" ) {\n\twindow.ComfyJSNew = comfyJS;\n}\n"],"names":["unescapeIRC","text","_","char","extractComponent","message","index","nextSpace","parseMessage","parsedMessage","component","nextIndex","tag","tagSplitIndex","key","value","rawCommand","commandEnd","parameterIndex","_WebSocket","createWebSocket","server","protocols","TwitchEventType","TwitchUserTypes","parseUsername","source","userIndex","parseBadges","badgesTag","badgeList","badges","badge","splitIndex","parseMessageFlags","flagsTag","flagsList","flags","flag","colonIndex","dotIndex","category","level","handleChatMessage","channel","_a","_b","_c","isAction","sanitizedMessage","tags","id","channelId","userId","username","displayName","userType","badgeInfo","userColor","emotes","messageFlags","contentFlags","isBroadcaster","isMod","isSubscriber","isTurbo","isVIP","isPrime","isPartner","isGameDeveloper","isFounder","timestamp","isEmoteOnly","isHighlightedMessage","isSkipSubsModeMessage","customRewardId","isFirstMessage","isReturningChatter","commonData","isCommand","msgParts","command","msg","processMessage","_d","_e","_f","commandParts","commandNumber","error","requestCapabilities","ws","authenticate","password","ircUsername","ircPassword","joinChannel","channels","c","leaveChannel","ping","pong","sendChat","replyChat","messageId","_ws","_username","_password","_pingTimer","_pingTime","_latency","_mainChannel","mainChannel_get","_isConnected","isConnected_get","_connect","connect_fn","_onOpen","onOpen_fn","_onError","onError_fn","_onClose","onClose_fn","_ping","ping_fn","_handleSpecialEvents","handleSpecialEvents_fn","_onMessage","onMessage_fn","TwitchEvents","isDebug","__privateAdd","__privateSet","__privateMethod","__privateGet","eventType","handler","event","hostUrl","parts","str","twitchEvents","parseMessageEmotes","messageEmotes","emoteMap","emote","positions","convertContextToUserState","context","userState","comfyJS","address","port","isFirstConnect","reconnectCount","user","extra","self","bits","subTierInfo","streamMonths","cumulativeMonths","gifterUser","streakMonths","recipientUser","senderCount","numbOfSubs","sender","duration","messageID","viewers"],"mappings":"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"}